
STM32F401CCU6_ST7735_TFT_LCD_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c78  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005400  08005400  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005408  08005408  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005408  08005408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800540c  0800540c  0001540c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000007c  0800548c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  0800548c  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b269  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d59  00000000  00000000  0002b315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002d070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002da90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016040  00000000  00000000  0002e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d073  00000000  00000000  00044408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086dd0  00000000  00000000  0005147b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d824b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc4  00000000  00000000  000d829c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004770 	.word	0x08004770

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08004770 	.word	0x08004770

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DS1307_START>:
  * @param  none
  *
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef DS1307_START()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af04      	add	r7, sp, #16
	  uint8_t CH_start=0;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]
	  CH_start = Register_Value_Reading(SECOND_REG);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 f886 	bl	80006a0 <Register_Value_Reading>
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
	  CH_start &= ~(CH_BIT);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	71fb      	strb	r3, [r7, #7]

	  if(HAL_I2C_Mem_Write(DS1307,DS1307_ADDRES, SECOND_REG,1,&CH_start,1,HAL_MAX_DELAY)==HAL_OK)
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	9302      	str	r3, [sp, #8]
 80005a8:	2301      	movs	r3, #1
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2301      	movs	r3, #1
 80005b2:	2200      	movs	r2, #0
 80005b4:	21d0      	movs	r1, #208	; 0xd0
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <DS1307_START+0x4c>)
 80005b8:	f001 fce0 	bl	8001f7c <HAL_I2C_Mem_Write>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <DS1307_START+0x42>
	  	  return HAL_OK;
 80005c2:	2300      	movs	r3, #0
 80005c4:	e000      	b.n	80005c8 <DS1307_START+0x44>

	    else
	    {
	  	  return HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
	    }
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000ac 	.word	0x200000ac

080005d4 <DS1307_Reading>:
  * @param  Value = Classroom where reading times and dates are recorded
  *
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef DS1307_Reading(RTC_TypeDef_t* Value)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af04      	add	r7, sp, #16
 80005da:	6078      	str	r0, [r7, #4]
	uint8_t data[7] = {0},state_flag=0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2100      	movs	r1, #0
 80005e6:	460a      	mov	r2, r1
 80005e8:	801a      	strh	r2, [r3, #0]
 80005ea:	460a      	mov	r2, r1
 80005ec:	709a      	strb	r2, [r3, #2]
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
  if(HAL_I2C_Mem_Read(DS1307,DS1307_ADDRES,SECOND_REG,1,data,7,HAL_MAX_DELAY)== HAL_OK)
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	2307      	movs	r3, #7
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	2200      	movs	r2, #0
 8000606:	21d0      	movs	r1, #208	; 0xd0
 8000608:	4824      	ldr	r0, [pc, #144]	; (800069c <DS1307_Reading+0xc8>)
 800060a:	f001 fdb1 	bl	8002170 <HAL_I2C_Mem_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d101      	bne.n	8000618 <DS1307_Reading+0x44>
    state_flag = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]

  Value->SECOND = BCD_to_Decimal(data[0]);
 8000618:	7a3b      	ldrb	r3, [r7, #8]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f862 	bl	80006e4 <BCD_to_Decimal>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	701a      	strb	r2, [r3, #0]
  Value->MINUTE = BCD_to_Decimal(data[1]);
 8000628:	7a7b      	ldrb	r3, [r7, #9]
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f85a 	bl	80006e4 <BCD_to_Decimal>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	705a      	strb	r2, [r3, #1]
  Value->HOURS  = BCD_to_Decimal(data[2]);
 8000638:	7abb      	ldrb	r3, [r7, #10]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f852 	bl	80006e4 <BCD_to_Decimal>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	709a      	strb	r2, [r3, #2]
  Value->DAY    = BCD_to_Decimal(data[3]);
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f84a 	bl	80006e4 <BCD_to_Decimal>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	721a      	strb	r2, [r3, #8]
  Value->DATE   = BCD_to_Decimal(data[4]);
 8000658:	7b3b      	ldrb	r3, [r7, #12]
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f842 	bl	80006e4 <BCD_to_Decimal>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	70da      	strb	r2, [r3, #3]
  Value->MONTH  = BCD_to_Decimal(data[5]);
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f83a 	bl	80006e4 <BCD_to_Decimal>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	711a      	strb	r2, [r3, #4]
  Value->YEAR   = BCD_to_Decimal(data[6]);
 8000678:	7bbb      	ldrb	r3, [r7, #14]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f832 	bl	80006e4 <BCD_to_Decimal>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	715a      	strb	r2, [r3, #5]

  if(state_flag)
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <DS1307_Reading+0xbe>
	 return HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	e000      	b.n	8000694 <DS1307_Reading+0xc0>

     return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000ac 	.word	0x200000ac

080006a0 <Register_Value_Reading>:
  * @param  Reg = Writing the register address that the user wants to read
  *
  * @retval uint8_t
  */
uint8_t Register_Value_Reading(uint8_t Reg)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af04      	add	r7, sp, #16
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	uint8_t Reg_Value=0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	73fb      	strb	r3, [r7, #15]

	  if(HAL_I2C_Mem_Read(DS1307,DS1307_ADDRES,Reg,1,&Reg_Value,1,HAL_MAX_DELAY) == HAL_OK)
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	2301      	movs	r3, #1
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	f107 030f 	add.w	r3, r7, #15
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2301      	movs	r3, #1
 80006c4:	21d0      	movs	r1, #208	; 0xd0
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <Register_Value_Reading+0x40>)
 80006c8:	f001 fd52 	bl	8002170 <HAL_I2C_Mem_Read>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d101      	bne.n	80006d6 <Register_Value_Reading+0x36>
	  {
		 return Reg_Value;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	e000      	b.n	80006d8 <Register_Value_Reading+0x38>
	  }
	  else
	  {
		 return 0;
 80006d6:	2300      	movs	r3, #0
	  }
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000ac 	.word	0x200000ac

080006e4 <BCD_to_Decimal>:
  * @param  uint8_t value = Converting received data to binary code decimal
  *
  * @retval uint8_t
  */
uint8_t BCD_to_Decimal(uint8_t value)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	uint8_t m=0,n=0,Bcd_value=0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	2300      	movs	r3, #0
 80006f4:	73bb      	strb	r3, [r7, #14]
 80006f6:	2300      	movs	r3, #0
 80006f8:	737b      	strb	r3, [r7, #13]

	  Bcd_value = value;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	737b      	strb	r3, [r7, #13]
	  m = (value >> 4) * 10;
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	091b      	lsrs	r3, r3, #4
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	0092      	lsls	r2, r2, #2
 8000708:	4413      	add	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
	  n = value & (uint8_t)0x0F;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 030f 	and.w	r3, r3, #15
 8000714:	73bb      	strb	r3, [r7, #14]
	  Bcd_value = (uint8_t)(m + n);
 8000716:	7bfa      	ldrb	r2, [r7, #15]
 8000718:	7bbb      	ldrb	r3, [r7, #14]
 800071a:	4413      	add	r3, r2
 800071c:	737b      	strb	r3, [r7, #13]

   return Bcd_value;
 800071e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fc29 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f90d 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f000 fa03 	bl	8000b44 <MX_GPIO_Init>
  MX_DMA_Init();
 800073e:	f000 f9d9 	bl	8000af4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000742:	f000 f971 	bl	8000a28 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000746:	f000 f99d 	bl	8000a84 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  DS1307_START();
 800074a:	f7ff ff1b 	bl	8000584 <DS1307_START>
  ST7735_TFT_Init(SCREEN_270_DEGREE_ROTATION);
 800074e:	2003      	movs	r0, #3
 8000750:	f003 fa2e 	bl	8003bb0 <ST7735_TFT_Init>
  ST7735_Background_Colour(BLACK_COLOUR);
 8000754:	2000      	movs	r0, #0
 8000756:	f003 fa01 	bl	8003b5c <ST7735_Background_Colour>

  ST7735_String(10,4,"DS1307 UYG",&Font16,GREEN_COLOUR,BLACK_COLOUR);
 800075a:	2300      	movs	r3, #0
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	4b6c      	ldr	r3, [pc, #432]	; (8000918 <main+0x1ec>)
 8000766:	4a6d      	ldr	r2, [pc, #436]	; (800091c <main+0x1f0>)
 8000768:	2104      	movs	r1, #4
 800076a:	200a      	movs	r0, #10
 800076c:	f003 fad8 	bl	8003d20 <ST7735_String>
  ST7735_String(10,20,"YEAR:",&Font16,BLUE_COLOUR,BLACK_COLOUR);
 8000770:	2300      	movs	r3, #0
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	231f      	movs	r3, #31
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	4b67      	ldr	r3, [pc, #412]	; (8000918 <main+0x1ec>)
 800077a:	4a69      	ldr	r2, [pc, #420]	; (8000920 <main+0x1f4>)
 800077c:	2114      	movs	r1, #20
 800077e:	200a      	movs	r0, #10
 8000780:	f003 face 	bl	8003d20 <ST7735_String>
  ST7735_String(10,36,"MONTH:",&Font16,YELLOW_COLOUR,BLACK_COLOUR);
 8000784:	2300      	movs	r3, #0
 8000786:	9301      	str	r3, [sp, #4]
 8000788:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	4b62      	ldr	r3, [pc, #392]	; (8000918 <main+0x1ec>)
 8000790:	4a64      	ldr	r2, [pc, #400]	; (8000924 <main+0x1f8>)
 8000792:	2124      	movs	r1, #36	; 0x24
 8000794:	200a      	movs	r0, #10
 8000796:	f003 fac3 	bl	8003d20 <ST7735_String>
  ST7735_String(10,52,"DAY:",&Font16,GREEN_COLOUR,BLACK_COLOUR);
 800079a:	2300      	movs	r3, #0
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	4b5c      	ldr	r3, [pc, #368]	; (8000918 <main+0x1ec>)
 80007a6:	4a60      	ldr	r2, [pc, #384]	; (8000928 <main+0x1fc>)
 80007a8:	2134      	movs	r1, #52	; 0x34
 80007aa:	200a      	movs	r0, #10
 80007ac:	f003 fab8 	bl	8003d20 <ST7735_String>
  ST7735_String(10,68,"HOUR:",&Font16,WHITE_COLOUR,BLACK_COLOUR);
 80007b0:	2300      	movs	r3, #0
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	4b57      	ldr	r3, [pc, #348]	; (8000918 <main+0x1ec>)
 80007bc:	4a5b      	ldr	r2, [pc, #364]	; (800092c <main+0x200>)
 80007be:	2144      	movs	r1, #68	; 0x44
 80007c0:	200a      	movs	r0, #10
 80007c2:	f003 faad 	bl	8003d20 <ST7735_String>
  ST7735_String(10,84,"MINUTE:",&Font16,ORANGE_COLOUR,BLACK_COLOUR);
 80007c6:	2300      	movs	r3, #0
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	f64f 43e0 	movw	r3, #64736	; 0xfce0
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4b51      	ldr	r3, [pc, #324]	; (8000918 <main+0x1ec>)
 80007d2:	4a57      	ldr	r2, [pc, #348]	; (8000930 <main+0x204>)
 80007d4:	2154      	movs	r1, #84	; 0x54
 80007d6:	200a      	movs	r0, #10
 80007d8:	f003 faa2 	bl	8003d20 <ST7735_String>
  ST7735_String(10,100,"SECOND:",&Font16,TURQUOISE_COLOUR,BLACK_COLOUR);
 80007dc:	2300      	movs	r3, #0
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <main+0x1ec>)
 80007e8:	4a52      	ldr	r2, [pc, #328]	; (8000934 <main+0x208>)
 80007ea:	2164      	movs	r1, #100	; 0x64
 80007ec:	200a      	movs	r0, #10
 80007ee:	f003 fa97 	bl	8003d20 <ST7735_String>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(DS1307_Reading(&Now)==HAL_OK)
 80007f2:	4851      	ldr	r0, [pc, #324]	; (8000938 <main+0x20c>)
 80007f4:	f7ff feee 	bl	80005d4 <DS1307_Reading>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 8086 	bne.w	800090c <main+0x1e0>
	 	 	 {
	 	 		 minute = Now.MINUTE;
 8000800:	4b4d      	ldr	r3, [pc, #308]	; (8000938 <main+0x20c>)
 8000802:	785a      	ldrb	r2, [r3, #1]
 8000804:	4b4d      	ldr	r3, [pc, #308]	; (800093c <main+0x210>)
 8000806:	701a      	strb	r2, [r3, #0]
	 	 		 secon=Now.SECOND;
 8000808:	4b4b      	ldr	r3, [pc, #300]	; (8000938 <main+0x20c>)
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <main+0x214>)
 800080e:	701a      	strb	r2, [r3, #0]
	 	 		 hours = Now.HOURS;
 8000810:	4b49      	ldr	r3, [pc, #292]	; (8000938 <main+0x20c>)
 8000812:	789a      	ldrb	r2, [r3, #2]
 8000814:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <main+0x218>)
 8000816:	701a      	strb	r2, [r3, #0]
	 			sprintf(data, "%d", Now.YEAR);
 8000818:	4b47      	ldr	r3, [pc, #284]	; (8000938 <main+0x20c>)
 800081a:	795b      	ldrb	r3, [r3, #5]
 800081c:	461a      	mov	r2, r3
 800081e:	494a      	ldr	r1, [pc, #296]	; (8000948 <main+0x21c>)
 8000820:	484a      	ldr	r0, [pc, #296]	; (800094c <main+0x220>)
 8000822:	f003 fb37 	bl	8003e94 <siprintf>
	 			ST7735_String(66,20, data, &Font16, BLUE_COLOUR, BLACK_COLOUR);
 8000826:	2300      	movs	r3, #0
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	231f      	movs	r3, #31
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <main+0x1ec>)
 8000830:	4a46      	ldr	r2, [pc, #280]	; (800094c <main+0x220>)
 8000832:	2114      	movs	r1, #20
 8000834:	2042      	movs	r0, #66	; 0x42
 8000836:	f003 fa73 	bl	8003d20 <ST7735_String>
	 			sprintf(data, "%d", Now.MONTH);
 800083a:	4b3f      	ldr	r3, [pc, #252]	; (8000938 <main+0x20c>)
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	461a      	mov	r2, r3
 8000840:	4941      	ldr	r1, [pc, #260]	; (8000948 <main+0x21c>)
 8000842:	4842      	ldr	r0, [pc, #264]	; (800094c <main+0x220>)
 8000844:	f003 fb26 	bl	8003e94 <siprintf>
	 			ST7735_String(77,36, data, &Font16, YELLOW_COLOUR, BLACK_COLOUR);
 8000848:	2300      	movs	r3, #0
 800084a:	9301      	str	r3, [sp, #4]
 800084c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <main+0x1ec>)
 8000854:	4a3d      	ldr	r2, [pc, #244]	; (800094c <main+0x220>)
 8000856:	2124      	movs	r1, #36	; 0x24
 8000858:	204d      	movs	r0, #77	; 0x4d
 800085a:	f003 fa61 	bl	8003d20 <ST7735_String>
	 			sprintf(data, "%d", Now.DAY);
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <main+0x20c>)
 8000860:	7a1b      	ldrb	r3, [r3, #8]
 8000862:	461a      	mov	r2, r3
 8000864:	4938      	ldr	r1, [pc, #224]	; (8000948 <main+0x21c>)
 8000866:	4839      	ldr	r0, [pc, #228]	; (800094c <main+0x220>)
 8000868:	f003 fb14 	bl	8003e94 <siprintf>
	 			ST7735_String(55,52, data, &Font16, GREEN_COLOUR, BLACK_COLOUR);
 800086c:	2300      	movs	r3, #0
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	4b28      	ldr	r3, [pc, #160]	; (8000918 <main+0x1ec>)
 8000878:	4a34      	ldr	r2, [pc, #208]	; (800094c <main+0x220>)
 800087a:	2134      	movs	r1, #52	; 0x34
 800087c:	2037      	movs	r0, #55	; 0x37
 800087e:	f003 fa4f 	bl	8003d20 <ST7735_String>
	 			sprintf(data, "%d", Now.HOURS);
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <main+0x20c>)
 8000884:	789b      	ldrb	r3, [r3, #2]
 8000886:	461a      	mov	r2, r3
 8000888:	492f      	ldr	r1, [pc, #188]	; (8000948 <main+0x21c>)
 800088a:	4830      	ldr	r0, [pc, #192]	; (800094c <main+0x220>)
 800088c:	f003 fb02 	bl	8003e94 <siprintf>
	 			ST7735_String(66,68, data, &Font16, WHITE_COLOUR, BLACK_COLOUR);
 8000890:	2300      	movs	r3, #0
 8000892:	9301      	str	r3, [sp, #4]
 8000894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <main+0x1ec>)
 800089c:	4a2b      	ldr	r2, [pc, #172]	; (800094c <main+0x220>)
 800089e:	2144      	movs	r1, #68	; 0x44
 80008a0:	2042      	movs	r0, #66	; 0x42
 80008a2:	f003 fa3d 	bl	8003d20 <ST7735_String>
	 			sprintf(data, "%d", Now.MINUTE);
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <main+0x20c>)
 80008a8:	785b      	ldrb	r3, [r3, #1]
 80008aa:	461a      	mov	r2, r3
 80008ac:	4926      	ldr	r1, [pc, #152]	; (8000948 <main+0x21c>)
 80008ae:	4827      	ldr	r0, [pc, #156]	; (800094c <main+0x220>)
 80008b0:	f003 faf0 	bl	8003e94 <siprintf>
	 			ST7735_String(88,84,data, &Font16, ORANGE_COLOUR, BLACK_COLOUR);
 80008b4:	2300      	movs	r3, #0
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	f64f 43e0 	movw	r3, #64736	; 0xfce0
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <main+0x1ec>)
 80008c0:	4a22      	ldr	r2, [pc, #136]	; (800094c <main+0x220>)
 80008c2:	2154      	movs	r1, #84	; 0x54
 80008c4:	2058      	movs	r0, #88	; 0x58
 80008c6:	f003 fa2b 	bl	8003d20 <ST7735_String>
	 			sprintf(data, "%d", Now.SECOND);
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <main+0x20c>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	491d      	ldr	r1, [pc, #116]	; (8000948 <main+0x21c>)
 80008d2:	481e      	ldr	r0, [pc, #120]	; (800094c <main+0x220>)
 80008d4:	f003 fade 	bl	8003e94 <siprintf>
	 			if(Now.SECOND<10)
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <main+0x20c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b09      	cmp	r3, #9
 80008de:	d80a      	bhi.n	80008f6 <main+0x1ca>
	 			ST7735_String(99,100," ", &Font16, TURQUOISE_COLOUR, BLACK_COLOUR);
 80008e0:	2300      	movs	r3, #0
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <main+0x1ec>)
 80008ec:	4a18      	ldr	r2, [pc, #96]	; (8000950 <main+0x224>)
 80008ee:	2164      	movs	r1, #100	; 0x64
 80008f0:	2063      	movs	r0, #99	; 0x63
 80008f2:	f003 fa15 	bl	8003d20 <ST7735_String>

	 			ST7735_String(88,100,data, &Font16, TURQUOISE_COLOUR, BLACK_COLOUR);
 80008f6:	2300      	movs	r3, #0
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <main+0x1ec>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <main+0x220>)
 8000904:	2164      	movs	r1, #100	; 0x64
 8000906:	2058      	movs	r0, #88	; 0x58
 8000908:	f003 fa0a 	bl	8003d20 <ST7735_String>

	 	 	 }


	 	  HAL_Delay(1000);
 800090c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000910:	f000 fbac 	bl	800106c <HAL_Delay>
	  if(DS1307_Reading(&Now)==HAL_OK)
 8000914:	e76d      	b.n	80007f2 <main+0xc6>
 8000916:	bf00      	nop
 8000918:	2000000c 	.word	0x2000000c
 800091c:	08004788 	.word	0x08004788
 8000920:	08004794 	.word	0x08004794
 8000924:	0800479c 	.word	0x0800479c
 8000928:	080047a4 	.word	0x080047a4
 800092c:	080047ac 	.word	0x080047ac
 8000930:	080047b4 	.word	0x080047b4
 8000934:	080047bc 	.word	0x080047bc
 8000938:	20000098 	.word	0x20000098
 800093c:	200000a1 	.word	0x200000a1
 8000940:	200000a2 	.word	0x200000a2
 8000944:	200000a3 	.word	0x200000a3
 8000948:	080047c4 	.word	0x080047c4
 800094c:	200000a4 	.word	0x200000a4
 8000950:	080047c8 	.word	0x080047c8

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b094      	sub	sp, #80	; 0x50
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0320 	add.w	r3, r7, #32
 800095e:	2230      	movs	r2, #48	; 0x30
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f003 fa8e 	bl	8003e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <SystemClock_Config+0xcc>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	4a27      	ldr	r2, [pc, #156]	; (8000a20 <SystemClock_Config+0xcc>)
 8000982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000986:	6413      	str	r3, [r2, #64]	; 0x40
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <SystemClock_Config+0xcc>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <SystemClock_Config+0xd0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009a0:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <SystemClock_Config+0xd0>)
 80009a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <SystemClock_Config+0xd0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009be:	2302      	movs	r3, #2
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009c8:	2319      	movs	r3, #25
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009cc:	23a8      	movs	r3, #168	; 0xa8
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d4:	2304      	movs	r3, #4
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 f949 	bl	8002c74 <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009e8:	f000 f8fc 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	230f      	movs	r3, #15
 80009ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2302      	movs	r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	2102      	movs	r1, #2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 fbab 	bl	8003164 <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a14:	f000 f8e6 	bl	8000be4 <Error_Handler>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3750      	adds	r7, #80	; 0x50
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <MX_I2C1_Init+0x54>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_I2C1_Init+0x58>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a66:	f001 f945 	bl	8001cf4 <HAL_I2C_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a70:	f000 f8b8 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200000ac 	.word	0x200000ac
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	000186a0 	.word	0x000186a0

08000a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_SPI1_Init+0x68>)
 8000a8a:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <MX_SPI1_Init+0x6c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_SPI1_Init+0x68>)
 8000a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_SPI1_Init+0x68>)
 8000a98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a9c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_SPI1_Init+0x68>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_SPI1_Init+0x68>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_SPI1_Init+0x68>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_SPI1_Init+0x68>)
 8000ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_SPI1_Init+0x68>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_SPI1_Init+0x68>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_SPI1_Init+0x68>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_SPI1_Init+0x68>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_SPI1_Init+0x68>)
 8000ad2:	220a      	movs	r2, #10
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_SPI1_Init+0x68>)
 8000ad8:	f002 fd10 	bl	80034fc <HAL_SPI_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000ae2:	f000 f87f 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000100 	.word	0x20000100
 8000af0:	40013000 	.word	0x40013000

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_DMA_Init+0x4c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <MX_DMA_Init+0x4c>)
 8000b04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <MX_DMA_Init+0x4c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2038      	movs	r0, #56	; 0x38
 8000b1c:	f000 fba5 	bl	800126a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b20:	2038      	movs	r0, #56	; 0x38
 8000b22:	f000 fbbe 	bl	80012a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	203b      	movs	r0, #59	; 0x3b
 8000b2c:	f000 fb9d 	bl	800126a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b30:	203b      	movs	r0, #59	; 0x3b
 8000b32:	f000 fbb6 	bl	80012a2 <HAL_NVIC_EnableIRQ>

}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_GPIO_Init+0x98>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <MX_GPIO_Init+0x98>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_GPIO_Init+0x98>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_GPIO_Init+0x98>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <MX_GPIO_Init+0x98>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_GPIO_Init+0x98>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_GPIO_Init+0x98>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <MX_GPIO_Init+0x98>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_GPIO_Init+0x98>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2107      	movs	r1, #7
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <MX_GPIO_Init+0x9c>)
 8000bb4:	f001 f884 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_GPIO_Init+0x9c>)
 8000bd0:	f000 fef2 	bl	80019b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020400 	.word	0x40020400

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <HAL_I2C_MspInit+0x84>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12c      	bne.n	8000cbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c84:	2312      	movs	r3, #18
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c90:	2304      	movs	r3, #4
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <HAL_I2C_MspInit+0x8c>)
 8000c9c:	f000 fe8c 	bl	80019b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_I2C_MspInit+0x88>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020400 	.word	0x40020400

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a47      	ldr	r2, [pc, #284]	; (8000e0c <HAL_SPI_MspInit+0x13c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	f040 8088 	bne.w	8000e04 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	4b45      	ldr	r3, [pc, #276]	; (8000e10 <HAL_SPI_MspInit+0x140>)
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	4a44      	ldr	r2, [pc, #272]	; (8000e10 <HAL_SPI_MspInit+0x140>)
 8000cfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d02:	6453      	str	r3, [r2, #68]	; 0x44
 8000d04:	4b42      	ldr	r3, [pc, #264]	; (8000e10 <HAL_SPI_MspInit+0x140>)
 8000d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	4b3e      	ldr	r3, [pc, #248]	; (8000e10 <HAL_SPI_MspInit+0x140>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	4a3d      	ldr	r2, [pc, #244]	; (8000e10 <HAL_SPI_MspInit+0x140>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d20:	4b3b      	ldr	r3, [pc, #236]	; (8000e10 <HAL_SPI_MspInit+0x140>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d2c:	23a0      	movs	r3, #160	; 0xa0
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4833      	ldr	r0, [pc, #204]	; (8000e14 <HAL_SPI_MspInit+0x144>)
 8000d48:	f000 fe36 	bl	80019b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000d4c:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000d4e:	4a33      	ldr	r2, [pc, #204]	; (8000e1c <HAL_SPI_MspInit+0x14c>)
 8000d50:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000d52:	4b31      	ldr	r3, [pc, #196]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000d54:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d58:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000d5c:	2240      	movs	r2, #64	; 0x40
 8000d5e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d66:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d7a:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d8c:	4822      	ldr	r0, [pc, #136]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000d8e:	f000 faa3 	bl	80012d8 <HAL_DMA_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000d98:	f7ff ff24 	bl	8000be4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000da0:	649a      	str	r2, [r3, #72]	; 0x48
 8000da2:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <HAL_SPI_MspInit+0x148>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000daa:	4a1e      	ldr	r2, [pc, #120]	; (8000e24 <HAL_SPI_MspInit+0x154>)
 8000dac:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000db0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000db4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000dea:	f000 fa75 	bl	80012d8 <HAL_DMA_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000df4:	f7ff fef6 	bl	8000be4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000dfc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_SPI_MspInit+0x150>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40013000 	.word	0x40013000
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000
 8000e18:	20000158 	.word	0x20000158
 8000e1c:	40026458 	.word	0x40026458
 8000e20:	200001b8 	.word	0x200001b8
 8000e24:	40026410 	.word	0x40026410

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e74:	f000 f8da 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA2_Stream0_IRQHandler+0x10>)
 8000e82:	f000 fb2f 	bl	80014e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200001b8 	.word	0x200001b8

08000e90 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA2_Stream3_IRQHandler+0x10>)
 8000e96:	f000 fb25 	bl	80014e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000158 	.word	0x20000158

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f002 ffac 	bl	8003e30 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20010000 	.word	0x20010000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	20000218 	.word	0x20000218
 8000f0c:	20000238 	.word	0x20000238

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3a:	490e      	ldr	r1, [pc, #56]	; (8000f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f50:	4c0b      	ldr	r4, [pc, #44]	; (8000f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f5e:	f7ff ffd7 	bl	8000f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f002 ff6b 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fbe1 	bl	800072c <main>
  bx  lr    
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f78:	08005410 	.word	0x08005410
  ldr r2, =_sbss
 8000f7c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f80:	20000234 	.word	0x20000234

08000f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f94f 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f7ff fe18 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f967 	bl	80012be <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 f92f 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	20000008 	.word	0x20000008
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	2000021c 	.word	0x2000021c

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000021c 	.word	0x2000021c

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <__NVIC_EnableIRQ+0x38>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff29 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff3e 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff31 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffa2 	bl	8001210 <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff feb6 	bl	8001054 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e099      	b.n	8001428 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001314:	e00f      	b.n	8001336 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001316:	f7ff fe9d 	bl	8001054 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b05      	cmp	r3, #5
 8001322:	d908      	bls.n	8001336 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2220      	movs	r2, #32
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2203      	movs	r2, #3
 800132e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e078      	b.n	8001428 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e8      	bne.n	8001316 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_DMA_Init+0x158>)
 8001350:	4013      	ands	r3, r2
 8001352:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001362:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4313      	orrs	r3, r2
 8001386:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	2b04      	cmp	r3, #4
 800138e:	d107      	bne.n	80013a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4313      	orrs	r3, r2
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4313      	orrs	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f023 0307 	bic.w	r3, r3, #7
 80013b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	4313      	orrs	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d117      	bne.n	80013fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00e      	beq.n	80013fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fa6f 	bl	80018c0 <DMA_CheckFifoParam>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013f6:	2301      	movs	r3, #1
 80013f8:	e016      	b.n	8001428 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fa26 	bl	8001854 <DMA_CalcBaseAndBitshift>
 8001408:	4603      	mov	r3, r0
 800140a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001410:	223f      	movs	r2, #63	; 0x3f
 8001412:	409a      	lsls	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	f010803f 	.word	0xf010803f

08001434 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_DMA_Start_IT+0x26>
 8001456:	2302      	movs	r3, #2
 8001458:	e040      	b.n	80014dc <HAL_DMA_Start_IT+0xa8>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d12f      	bne.n	80014ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2202      	movs	r2, #2
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f9b8 	bl	80017f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	223f      	movs	r2, #63	; 0x3f
 800148e:	409a      	lsls	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0216 	orr.w	r2, r2, #22
 80014a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0208 	orr.w	r2, r2, #8
 80014ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e005      	b.n	80014da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014d6:	2302      	movs	r3, #2
 80014d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014da:	7dfb      	ldrb	r3, [r7, #23]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014f0:	4b8e      	ldr	r3, [pc, #568]	; (800172c <HAL_DMA_IRQHandler+0x248>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a8e      	ldr	r2, [pc, #568]	; (8001730 <HAL_DMA_IRQHandler+0x24c>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0a9b      	lsrs	r3, r3, #10
 80014fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	2208      	movs	r2, #8
 8001510:	409a      	lsls	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01a      	beq.n	8001550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0204 	bic.w	r2, r2, #4
 8001536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	2208      	movs	r2, #8
 800153e:	409a      	lsls	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	2201      	movs	r2, #1
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d012      	beq.n	8001586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	2201      	movs	r2, #1
 8001574:	409a      	lsls	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157e:	f043 0202 	orr.w	r2, r3, #2
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	2204      	movs	r2, #4
 800158c:	409a      	lsls	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d012      	beq.n	80015bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00b      	beq.n	80015bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	2204      	movs	r2, #4
 80015aa:	409a      	lsls	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f043 0204 	orr.w	r2, r3, #4
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	2210      	movs	r2, #16
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d043      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d03c      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2210      	movs	r2, #16
 80015e0:	409a      	lsls	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d018      	beq.n	8001626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d024      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	4798      	blx	r3
 8001612:	e01f      	b.n	8001654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01b      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
 8001624:	e016      	b.n	8001654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0208 	bic.w	r2, r2, #8
 8001642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001658:	2220      	movs	r2, #32
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 808f 	beq.w	8001784 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 8087 	beq.w	8001784 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	2220      	movs	r2, #32
 800167c:	409a      	lsls	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b05      	cmp	r3, #5
 800168c:	d136      	bne.n	80016fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0216 	bic.w	r2, r2, #22
 800169c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <HAL_DMA_IRQHandler+0x1da>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0208 	bic.w	r2, r2, #8
 80016cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d2:	223f      	movs	r2, #63	; 0x3f
 80016d4:	409a      	lsls	r2, r3
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d07e      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
        }
        return;
 80016fa:	e079      	b.n	80017f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01d      	beq.n	8001746 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10d      	bne.n	8001734 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	2b00      	cmp	r3, #0
 800171e:	d031      	beq.n	8001784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	4798      	blx	r3
 8001728:	e02c      	b.n	8001784 <HAL_DMA_IRQHandler+0x2a0>
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000
 8001730:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d023      	beq.n	8001784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	4798      	blx	r3
 8001744:	e01e      	b.n	8001784 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10f      	bne.n	8001774 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0210 	bic.w	r2, r2, #16
 8001762:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	2b00      	cmp	r3, #0
 800178a:	d032      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d022      	beq.n	80017de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2205      	movs	r2, #5
 800179c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d307      	bcc.n	80017cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f2      	bne.n	80017b0 <HAL_DMA_IRQHandler+0x2cc>
 80017ca:	e000      	b.n	80017ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
 80017ee:	e000      	b.n	80017f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80017f0:	bf00      	nop
    }
  }
}
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001814:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b40      	cmp	r3, #64	; 0x40
 8001824:	d108      	bne.n	8001838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001836:	e007      	b.n	8001848 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	60da      	str	r2, [r3, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3b10      	subs	r3, #16
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <DMA_CalcBaseAndBitshift+0x68>)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d909      	bls.n	8001896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800188a:	f023 0303 	bic.w	r3, r3, #3
 800188e:	1d1a      	adds	r2, r3, #4
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	659a      	str	r2, [r3, #88]	; 0x58
 8001894:	e007      	b.n	80018a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800189e:	f023 0303 	bic.w	r3, r3, #3
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	aaaaaaab 	.word	0xaaaaaaab
 80018bc:	080047e4 	.word	0x080047e4

080018c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d11f      	bne.n	800191a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d856      	bhi.n	800198e <DMA_CheckFifoParam+0xce>
 80018e0:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <DMA_CheckFifoParam+0x28>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	0800190b 	.word	0x0800190b
 80018f0:	080018f9 	.word	0x080018f9
 80018f4:	0800198f 	.word	0x0800198f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d046      	beq.n	8001992 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001908:	e043      	b.n	8001992 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001912:	d140      	bne.n	8001996 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001918:	e03d      	b.n	8001996 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001922:	d121      	bne.n	8001968 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d837      	bhi.n	800199a <DMA_CheckFifoParam+0xda>
 800192a:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <DMA_CheckFifoParam+0x70>)
 800192c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001930:	08001941 	.word	0x08001941
 8001934:	08001947 	.word	0x08001947
 8001938:	08001941 	.word	0x08001941
 800193c:	08001959 	.word	0x08001959
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
      break;
 8001944:	e030      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d025      	beq.n	800199e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001956:	e022      	b.n	800199e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001960:	d11f      	bne.n	80019a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001966:	e01c      	b.n	80019a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d903      	bls.n	8001976 <DMA_CheckFifoParam+0xb6>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d003      	beq.n	800197c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001974:	e018      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
      break;
 800197a:	e015      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00e      	beq.n	80019a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
      break;
 800198c:	e00b      	b.n	80019a6 <DMA_CheckFifoParam+0xe6>
      break;
 800198e:	bf00      	nop
 8001990:	e00a      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001992:	bf00      	nop
 8001994:	e008      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;
 8001996:	bf00      	nop
 8001998:	e006      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;
 800199a:	bf00      	nop
 800199c:	e004      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;
 800199e:	bf00      	nop
 80019a0:	e002      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80019a2:	bf00      	nop
 80019a4:	e000      	b.n	80019a8 <DMA_CheckFifoParam+0xe8>
      break;
 80019a6:	bf00      	nop
    }
  } 
  
  return status; 
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e159      	b.n	8001c88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8148 	bne.w	8001c82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d005      	beq.n	8001a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d130      	bne.n	8001a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d017      	beq.n	8001aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80a2 	beq.w	8001c82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a56      	ldr	r2, [pc, #344]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5a:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_GPIO_Init+0x2ec>)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a49      	ldr	r2, [pc, #292]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d019      	beq.n	8001bba <HAL_GPIO_Init+0x202>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a48      	ldr	r2, [pc, #288]	; (8001cac <HAL_GPIO_Init+0x2f4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_GPIO_Init+0x1fe>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_GPIO_Init+0x2f8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00d      	beq.n	8001bb2 <HAL_GPIO_Init+0x1fa>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <HAL_GPIO_Init+0x2fc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <HAL_GPIO_Init+0x1f6>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a45      	ldr	r2, [pc, #276]	; (8001cb8 <HAL_GPIO_Init+0x300>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_GPIO_Init+0x1f2>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e008      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001baa:	2307      	movs	r3, #7
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e004      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_GPIO_Init+0x204>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f002 0203 	and.w	r2, r2, #3
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	4093      	lsls	r3, r2
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bcc:	4935      	ldr	r1, [pc, #212]	; (8001ca4 <HAL_GPIO_Init+0x2ec>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfe:	4a2f      	ldr	r2, [pc, #188]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c28:	4a24      	ldr	r2, [pc, #144]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c52:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c7c:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_GPIO_Init+0x304>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	f67f aea2 	bls.w	80019d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40013800 	.word	0x40013800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e12b      	b.n	8001f5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7fe ff90 	bl	8000c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2224      	movs	r2, #36	; 0x24
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0201 	bic.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d58:	f001 fbbc 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8001d5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4a81      	ldr	r2, [pc, #516]	; (8001f68 <HAL_I2C_Init+0x274>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d807      	bhi.n	8001d78 <HAL_I2C_Init+0x84>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4a80      	ldr	r2, [pc, #512]	; (8001f6c <HAL_I2C_Init+0x278>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	bf94      	ite	ls
 8001d70:	2301      	movls	r3, #1
 8001d72:	2300      	movhi	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	e006      	b.n	8001d86 <HAL_I2C_Init+0x92>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4a7d      	ldr	r2, [pc, #500]	; (8001f70 <HAL_I2C_Init+0x27c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	bf94      	ite	ls
 8001d80:	2301      	movls	r3, #1
 8001d82:	2300      	movhi	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0e7      	b.n	8001f5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4a78      	ldr	r2, [pc, #480]	; (8001f74 <HAL_I2C_Init+0x280>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	0c9b      	lsrs	r3, r3, #18
 8001d98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a6a      	ldr	r2, [pc, #424]	; (8001f68 <HAL_I2C_Init+0x274>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d802      	bhi.n	8001dc8 <HAL_I2C_Init+0xd4>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	e009      	b.n	8001ddc <HAL_I2C_Init+0xe8>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	4a69      	ldr	r2, [pc, #420]	; (8001f78 <HAL_I2C_Init+0x284>)
 8001dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd8:	099b      	lsrs	r3, r3, #6
 8001dda:	3301      	adds	r3, #1
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	495c      	ldr	r1, [pc, #368]	; (8001f68 <HAL_I2C_Init+0x274>)
 8001df8:	428b      	cmp	r3, r1
 8001dfa:	d819      	bhi.n	8001e30 <HAL_I2C_Init+0x13c>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1e59      	subs	r1, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e0a:	1c59      	adds	r1, r3, #1
 8001e0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e10:	400b      	ands	r3, r1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_I2C_Init+0x138>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1e59      	subs	r1, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e24:	3301      	adds	r3, #1
 8001e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2a:	e051      	b.n	8001ed0 <HAL_I2C_Init+0x1dc>
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	e04f      	b.n	8001ed0 <HAL_I2C_Init+0x1dc>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d111      	bne.n	8001e5c <HAL_I2C_Init+0x168>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1e58      	subs	r0, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	440b      	add	r3, r1
 8001e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	e012      	b.n	8001e82 <HAL_I2C_Init+0x18e>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1e58      	subs	r0, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	0099      	lsls	r1, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Init+0x196>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e022      	b.n	8001ed0 <HAL_I2C_Init+0x1dc>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10e      	bne.n	8001eb0 <HAL_I2C_Init+0x1bc>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1e58      	subs	r0, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	440b      	add	r3, r1
 8001ea0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eae:	e00f      	b.n	8001ed0 <HAL_I2C_Init+0x1dc>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1e58      	subs	r0, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	0099      	lsls	r1, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	6809      	ldr	r1, [r1, #0]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69da      	ldr	r2, [r3, #28]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001efe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6911      	ldr	r1, [r2, #16]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68d2      	ldr	r2, [r2, #12]
 8001f0a:	4311      	orrs	r1, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	430b      	orrs	r3, r1
 8001f12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	000186a0 	.word	0x000186a0
 8001f6c:	001e847f 	.word	0x001e847f
 8001f70:	003d08ff 	.word	0x003d08ff
 8001f74:	431bde83 	.word	0x431bde83
 8001f78:	10624dd3 	.word	0x10624dd3

08001f7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	4608      	mov	r0, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	817b      	strh	r3, [r7, #10]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	813b      	strh	r3, [r7, #8]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f96:	f7ff f85d 	bl	8001054 <HAL_GetTick>
 8001f9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	f040 80d9 	bne.w	800215c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2319      	movs	r3, #25
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	496d      	ldr	r1, [pc, #436]	; (8002168 <HAL_I2C_Mem_Write+0x1ec>)
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f000 fc7f 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e0cc      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2C_Mem_Write+0x56>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e0c5      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d007      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002006:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2221      	movs	r2, #33	; 0x21
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2240      	movs	r2, #64	; 0x40
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a3a      	ldr	r2, [r7, #32]
 8002022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a4d      	ldr	r2, [pc, #308]	; (800216c <HAL_I2C_Mem_Write+0x1f0>)
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800203a:	88f8      	ldrh	r0, [r7, #6]
 800203c:	893a      	ldrh	r2, [r7, #8]
 800203e:	8979      	ldrh	r1, [r7, #10]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4603      	mov	r3, r0
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fab6 	bl	80025bc <I2C_RequestMemoryWrite>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d052      	beq.n	80020fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e081      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fd00 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00d      	beq.n	8002086 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b04      	cmp	r3, #4
 8002070:	d107      	bne.n	8002082 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06b      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d11b      	bne.n	80020fc <HAL_I2C_Mem_Write+0x180>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d017      	beq.n	80020fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	781a      	ldrb	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1aa      	bne.n	800205a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fcec 	bl	8002ae6 <I2C_WaitOnBTFFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00d      	beq.n	8002130 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	2b04      	cmp	r3, #4
 800211a:	d107      	bne.n	800212c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e016      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800213e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	e000      	b.n	800215e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800215c:	2302      	movs	r3, #2
  }
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	00100002 	.word	0x00100002
 800216c:	ffff0000 	.word	0xffff0000

08002170 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	4608      	mov	r0, r1
 800217a:	4611      	mov	r1, r2
 800217c:	461a      	mov	r2, r3
 800217e:	4603      	mov	r3, r0
 8002180:	817b      	strh	r3, [r7, #10]
 8002182:	460b      	mov	r3, r1
 8002184:	813b      	strh	r3, [r7, #8]
 8002186:	4613      	mov	r3, r2
 8002188:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800218a:	f7fe ff63 	bl	8001054 <HAL_GetTick>
 800218e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b20      	cmp	r3, #32
 800219a:	f040 8208 	bne.w	80025ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2319      	movs	r3, #25
 80021a4:	2201      	movs	r2, #1
 80021a6:	497b      	ldr	r1, [pc, #492]	; (8002394 <HAL_I2C_Mem_Read+0x224>)
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fb85 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
 80021b6:	e1fb      	b.n	80025b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_Mem_Read+0x56>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e1f4      	b.n	80025b0 <HAL_I2C_Mem_Read+0x440>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d007      	beq.n	80021ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2222      	movs	r2, #34	; 0x22
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800221c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a5b      	ldr	r2, [pc, #364]	; (8002398 <HAL_I2C_Mem_Read+0x228>)
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800222e:	88f8      	ldrh	r0, [r7, #6]
 8002230:	893a      	ldrh	r2, [r7, #8]
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	4603      	mov	r3, r0
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fa52 	bl	80026e8 <I2C_RequestMemoryRead>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e1b0      	b.n	80025b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	2b00      	cmp	r3, #0
 8002254:	d113      	bne.n	800227e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	623b      	str	r3, [r7, #32]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	623b      	str	r3, [r7, #32]
 800226a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e184      	b.n	8002588 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	2b01      	cmp	r3, #1
 8002284:	d11b      	bne.n	80022be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002294:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e164      	b.n	8002588 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d11b      	bne.n	80022fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	e144      	b.n	8002588 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002314:	e138      	b.n	8002588 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	2b03      	cmp	r3, #3
 800231c:	f200 80f1 	bhi.w	8002502 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002324:	2b01      	cmp	r3, #1
 8002326:	d123      	bne.n	8002370 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fc1b 	bl	8002b68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e139      	b.n	80025b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800236e:	e10b      	b.n	8002588 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	2b02      	cmp	r3, #2
 8002376:	d14e      	bne.n	8002416 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237e:	2200      	movs	r2, #0
 8002380:	4906      	ldr	r1, [pc, #24]	; (800239c <HAL_I2C_Mem_Read+0x22c>)
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fa98 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e10e      	b.n	80025b0 <HAL_I2C_Mem_Read+0x440>
 8002392:	bf00      	nop
 8002394:	00100002 	.word	0x00100002
 8002398:	ffff0000 	.word	0xffff0000
 800239c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002414:	e0b8      	b.n	8002588 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	2200      	movs	r2, #0
 800241e:	4966      	ldr	r1, [pc, #408]	; (80025b8 <HAL_I2C_Mem_Read+0x448>)
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fa49 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0bf      	b.n	80025b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	2200      	movs	r2, #0
 800247a:	494f      	ldr	r1, [pc, #316]	; (80025b8 <HAL_I2C_Mem_Read+0x448>)
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fa1b 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e091      	b.n	80025b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002500:	e042      	b.n	8002588 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fb2e 	bl	8002b68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e04c      	b.n	80025b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b04      	cmp	r3, #4
 8002554:	d118      	bne.n	8002588 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f aec2 	bne.w	8002316 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e000      	b.n	80025b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025ae:	2302      	movs	r3, #2
  }
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3728      	adds	r7, #40	; 0x28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	00010004 	.word	0x00010004

080025bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	4608      	mov	r0, r1
 80025c6:	4611      	mov	r1, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	817b      	strh	r3, [r7, #10]
 80025ce:	460b      	mov	r3, r1
 80025d0:	813b      	strh	r3, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f960 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260c:	d103      	bne.n	8002616 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e05f      	b.n	80026da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800261a:	897b      	ldrh	r3, [r7, #10]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002628:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	6a3a      	ldr	r2, [r7, #32]
 800262e:	492d      	ldr	r1, [pc, #180]	; (80026e4 <I2C_RequestMemoryWrite+0x128>)
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f998 	bl	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e04c      	b.n	80026da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	6a39      	ldr	r1, [r7, #32]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fa02 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b04      	cmp	r3, #4
 800266c:	d107      	bne.n	800267e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e02b      	b.n	80026da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002688:	893b      	ldrh	r3, [r7, #8]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	611a      	str	r2, [r3, #16]
 8002692:	e021      	b.n	80026d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002694:	893b      	ldrh	r3, [r7, #8]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	b29b      	uxth	r3, r3
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a4:	6a39      	ldr	r1, [r7, #32]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f9dc 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d107      	bne.n	80026ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e005      	b.n	80026da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026ce:	893b      	ldrh	r3, [r7, #8]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	00010002 	.word	0x00010002

080026e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	4608      	mov	r0, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	461a      	mov	r2, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	460b      	mov	r3, r1
 80026fc:	813b      	strh	r3, [r7, #8]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002710:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002720:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	2200      	movs	r2, #0
 800272a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f8c2 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00d      	beq.n	8002756 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002748:	d103      	bne.n	8002752 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0aa      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002764:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	6a3a      	ldr	r2, [r7, #32]
 800276a:	4952      	ldr	r1, [pc, #328]	; (80028b4 <I2C_RequestMemoryRead+0x1cc>)
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f8fa 	bl	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e097      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	6a39      	ldr	r1, [r7, #32]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f964 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00d      	beq.n	80027be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d107      	bne.n	80027ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e076      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d105      	bne.n	80027d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027c4:	893b      	ldrh	r3, [r7, #8]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	611a      	str	r2, [r3, #16]
 80027ce:	e021      	b.n	8002814 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027d0:	893b      	ldrh	r3, [r7, #8]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e0:	6a39      	ldr	r1, [r7, #32]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f93e 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d107      	bne.n	8002806 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002804:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e050      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800280a:	893b      	ldrh	r3, [r7, #8]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	6a39      	ldr	r1, [r7, #32]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f923 	bl	8002a64 <I2C_WaitOnTXEFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00d      	beq.n	8002840 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2b04      	cmp	r3, #4
 800282a:	d107      	bne.n	800283c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e035      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800284e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	2200      	movs	r2, #0
 8002858:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f82b 	bl	80028b8 <I2C_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00d      	beq.n	8002884 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002876:	d103      	bne.n	8002880 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e013      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002884:	897b      	ldrh	r3, [r7, #10]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	6a3a      	ldr	r2, [r7, #32]
 8002898:	4906      	ldr	r1, [pc, #24]	; (80028b4 <I2C_RequestMemoryRead+0x1cc>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f863 	bl	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	00010002 	.word	0x00010002

080028b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c8:	e025      	b.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d021      	beq.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d2:	f7fe fbbf 	bl	8001054 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d116      	bne.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e023      	b.n	800295e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d10d      	bne.n	800293c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	e00c      	b.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4013      	ands	r3, r2
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	bf0c      	ite	eq
 800294e:	2301      	moveq	r3, #1
 8002950:	2300      	movne	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	429a      	cmp	r2, r3
 800295a:	d0b6      	beq.n	80028ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002974:	e051      	b.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002984:	d123      	bne.n	80029ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002994:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800299e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e046      	b.n	8002a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d021      	beq.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d6:	f7fe fb3d 	bl	8001054 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d116      	bne.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f043 0220 	orr.w	r2, r3, #32
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e020      	b.n	8002a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d10c      	bne.n	8002a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	e00b      	b.n	8002a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	43da      	mvns	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d18d      	bne.n	8002976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a70:	e02d      	b.n	8002ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f8ce 	bl	8002c14 <I2C_IsAcknowledgeFailed>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e02d      	b.n	8002ade <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d021      	beq.n	8002ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8a:	f7fe fae3 	bl	8001054 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d302      	bcc.n	8002aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d116      	bne.n	8002ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e007      	b.n	8002ade <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	2b80      	cmp	r3, #128	; 0x80
 8002ada:	d1ca      	bne.n	8002a72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002af2:	e02d      	b.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f88d 	bl	8002c14 <I2C_IsAcknowledgeFailed>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e02d      	b.n	8002b60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0a:	d021      	beq.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0c:	f7fe faa2 	bl	8001054 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d302      	bcc.n	8002b22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d116      	bne.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e007      	b.n	8002b60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d1ca      	bne.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b74:	e042      	b.n	8002bfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d119      	bne.n	8002bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0210 	mvn.w	r2, #16
 8002b8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e029      	b.n	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb8:	f7fe fa4c 	bl	8001054 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d302      	bcc.n	8002bce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e007      	b.n	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b40      	cmp	r3, #64	; 0x40
 8002c08:	d1b5      	bne.n	8002b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2a:	d11b      	bne.n	8002c64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e267      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d075      	beq.n	8002d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c92:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9e:	4b85      	ldr	r3, [pc, #532]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d112      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002caa:	4b82      	ldr	r3, [pc, #520]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	4b7e      	ldr	r3, [pc, #504]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d05b      	beq.n	8002d7c <HAL_RCC_OscConfig+0x108>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d157      	bne.n	8002d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e242      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd8:	d106      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x74>
 8002cda:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a75      	ldr	r2, [pc, #468]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e01d      	b.n	8002d24 <HAL_RCC_OscConfig+0xb0>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x98>
 8002cf2:	4b70      	ldr	r3, [pc, #448]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a6f      	ldr	r2, [pc, #444]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6c      	ldr	r2, [pc, #432]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0xb0>
 8002d0c:	4b69      	ldr	r3, [pc, #420]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a68      	ldr	r2, [pc, #416]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe f992 	bl	8001054 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d34:	f7fe f98e 	bl	8001054 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e207      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b5b      	ldr	r3, [pc, #364]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0xc0>
 8002d52:	e014      	b.n	8002d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe f97e 	bl	8001054 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fe f97a 	bl	8001054 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e1f3      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	4b51      	ldr	r3, [pc, #324]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0xe8>
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d063      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8a:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d11c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da2:	4b44      	ldr	r3, [pc, #272]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d116      	bne.n	8002ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dae:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x152>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e1c7      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4937      	ldr	r1, [pc, #220]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	e03a      	b.n	8002e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de4:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <HAL_RCC_OscConfig+0x244>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dea:	f7fe f933 	bl	8001054 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df2:	f7fe f92f 	bl	8001054 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1a8      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4925      	ldr	r1, [pc, #148]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
 8002e24:	e015      	b.n	8002e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e26:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_RCC_OscConfig+0x244>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe f912 	bl	8001054 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e34:	f7fe f90e 	bl	8001054 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e187      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d036      	beq.n	8002ecc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d016      	beq.n	8002e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_RCC_OscConfig+0x248>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6c:	f7fe f8f2 	bl	8001054 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e74:	f7fe f8ee 	bl	8001054 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e167      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_OscConfig+0x240>)
 8002e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x200>
 8002e92:	e01b      	b.n	8002ecc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_RCC_OscConfig+0x248>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9a:	f7fe f8db 	bl	8001054 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea0:	e00e      	b.n	8002ec0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea2:	f7fe f8d7 	bl	8001054 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d907      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e150      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	42470000 	.word	0x42470000
 8002ebc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec0:	4b88      	ldr	r3, [pc, #544]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ea      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8097 	beq.w	8003008 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ede:	4b81      	ldr	r3, [pc, #516]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10f      	bne.n	8002f0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	4b7d      	ldr	r3, [pc, #500]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a7c      	ldr	r2, [pc, #496]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b7a      	ldr	r3, [pc, #488]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f06:	2301      	movs	r3, #1
 8002f08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0a:	4b77      	ldr	r3, [pc, #476]	; (80030e8 <HAL_RCC_OscConfig+0x474>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d118      	bne.n	8002f48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f16:	4b74      	ldr	r3, [pc, #464]	; (80030e8 <HAL_RCC_OscConfig+0x474>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a73      	ldr	r2, [pc, #460]	; (80030e8 <HAL_RCC_OscConfig+0x474>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f22:	f7fe f897 	bl	8001054 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2a:	f7fe f893 	bl	8001054 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e10c      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <HAL_RCC_OscConfig+0x474>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d106      	bne.n	8002f5e <HAL_RCC_OscConfig+0x2ea>
 8002f50:	4b64      	ldr	r3, [pc, #400]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a63      	ldr	r2, [pc, #396]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	e01c      	b.n	8002f98 <HAL_RCC_OscConfig+0x324>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b05      	cmp	r3, #5
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x30c>
 8002f66:	4b5f      	ldr	r3, [pc, #380]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a5e      	ldr	r2, [pc, #376]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70
 8002f72:	4b5c      	ldr	r3, [pc, #368]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a5b      	ldr	r2, [pc, #364]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0x324>
 8002f80:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8c:	4b55      	ldr	r3, [pc, #340]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a54      	ldr	r2, [pc, #336]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002f92:	f023 0304 	bic.w	r3, r3, #4
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d015      	beq.n	8002fcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7fe f858 	bl	8001054 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7fe f854 	bl	8001054 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0cb      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0ee      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x334>
 8002fca:	e014      	b.n	8002ff6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fcc:	f7fe f842 	bl	8001054 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7fe f83e 	bl	8001054 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e0b5      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fea:	4b3e      	ldr	r3, [pc, #248]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1ee      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffc:	4b39      	ldr	r3, [pc, #228]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	4a38      	ldr	r2, [pc, #224]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8003002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003006:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 80a1 	beq.w	8003154 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003012:	4b34      	ldr	r3, [pc, #208]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b08      	cmp	r3, #8
 800301c:	d05c      	beq.n	80030d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d141      	bne.n	80030aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_RCC_OscConfig+0x478>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe f812 	bl	8001054 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe f80e 	bl	8001054 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e087      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	019b      	lsls	r3, r3, #6
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	3b01      	subs	r3, #1
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	061b      	lsls	r3, r3, #24
 8003076:	491b      	ldr	r1, [pc, #108]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_OscConfig+0x478>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7fd ffe7 	bl	8001054 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308a:	f7fd ffe3 	bl	8001054 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e05c      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x416>
 80030a8:	e054      	b.n	8003154 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <HAL_RCC_OscConfig+0x478>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fd ffd0 	bl	8001054 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fd ffcc 	bl	8001054 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e045      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_OscConfig+0x470>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x444>
 80030d6:	e03d      	b.n	8003154 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e038      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40007000 	.word	0x40007000
 80030ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030f0:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_RCC_OscConfig+0x4ec>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d028      	beq.n	8003150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d121      	bne.n	8003150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d11a      	bne.n	8003150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003126:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003128:	4293      	cmp	r3, r2
 800312a:	d111      	bne.n	8003150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	3b01      	subs	r3, #1
 800313a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d107      	bne.n	8003150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800

08003164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0cc      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b68      	ldr	r3, [pc, #416]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d90c      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b65      	ldr	r3, [pc, #404]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b63      	ldr	r3, [pc, #396]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0b8      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d020      	beq.n	80031ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b8:	4b59      	ldr	r3, [pc, #356]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4a58      	ldr	r2, [pc, #352]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d0:	4b53      	ldr	r3, [pc, #332]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a52      	ldr	r2, [pc, #328]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031dc:	4b50      	ldr	r3, [pc, #320]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	494d      	ldr	r1, [pc, #308]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d044      	beq.n	8003284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d119      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e07f      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d003      	beq.n	8003222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321e:	2b03      	cmp	r3, #3
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003222:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e06f      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e067      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003242:	4b37      	ldr	r3, [pc, #220]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f023 0203 	bic.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4934      	ldr	r1, [pc, #208]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003254:	f7fd fefe 	bl	8001054 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	e00a      	b.n	8003272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7fd fefa 	bl	8001054 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e04f      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 020c 	and.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	429a      	cmp	r2, r3
 8003282:	d1eb      	bne.n	800325c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d20c      	bcs.n	80032ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e032      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4916      	ldr	r1, [pc, #88]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	490e      	ldr	r1, [pc, #56]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ea:	f000 f821 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 80032ee:	4602      	mov	r2, r0
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	490a      	ldr	r1, [pc, #40]	; (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	5ccb      	ldrb	r3, [r1, r3]
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	4a09      	ldr	r2, [pc, #36]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_ClockConfig+0x1c8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd fe5e 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023c00 	.word	0x40023c00
 8003320:	40023800 	.word	0x40023800
 8003324:	080047cc 	.word	0x080047cc
 8003328:	20000000 	.word	0x20000000
 800332c:	20000004 	.word	0x20000004

08003330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003334:	b090      	sub	sp, #64	; 0x40
 8003336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
 800333c:	2300      	movs	r3, #0
 800333e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003340:	2300      	movs	r3, #0
 8003342:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d00d      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x40>
 8003354:	2b08      	cmp	r3, #8
 8003356:	f200 80a1 	bhi.w	800349c <HAL_RCC_GetSysClockFreq+0x16c>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0x34>
 800335e:	2b04      	cmp	r3, #4
 8003360:	d003      	beq.n	800336a <HAL_RCC_GetSysClockFreq+0x3a>
 8003362:	e09b      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003364:	4b53      	ldr	r3, [pc, #332]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003366:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003368:	e09b      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800336a:	4b53      	ldr	r3, [pc, #332]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800336c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800336e:	e098      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003370:	4b4f      	ldr	r3, [pc, #316]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800337a:	4b4d      	ldr	r3, [pc, #308]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d028      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003386:	4b4a      	ldr	r3, [pc, #296]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	099b      	lsrs	r3, r3, #6
 800338c:	2200      	movs	r2, #0
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	627a      	str	r2, [r7, #36]	; 0x24
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003398:	2100      	movs	r1, #0
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800339c:	fb03 f201 	mul.w	r2, r3, r1
 80033a0:	2300      	movs	r3, #0
 80033a2:	fb00 f303 	mul.w	r3, r0, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	4a43      	ldr	r2, [pc, #268]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033aa:	fba0 1202 	umull	r1, r2, r0, r2
 80033ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b0:	460a      	mov	r2, r1
 80033b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80033b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b6:	4413      	add	r3, r2
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033bc:	2200      	movs	r2, #0
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	61fa      	str	r2, [r7, #28]
 80033c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033ca:	f7fc ff59 	bl	8000280 <__aeabi_uldivmod>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4613      	mov	r3, r2
 80033d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d6:	e053      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d8:	4b35      	ldr	r3, [pc, #212]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	2200      	movs	r2, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	617a      	str	r2, [r7, #20]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033ea:	f04f 0b00 	mov.w	fp, #0
 80033ee:	4652      	mov	r2, sl
 80033f0:	465b      	mov	r3, fp
 80033f2:	f04f 0000 	mov.w	r0, #0
 80033f6:	f04f 0100 	mov.w	r1, #0
 80033fa:	0159      	lsls	r1, r3, #5
 80033fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003400:	0150      	lsls	r0, r2, #5
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	ebb2 080a 	subs.w	r8, r2, sl
 800340a:	eb63 090b 	sbc.w	r9, r3, fp
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800341a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800341e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003422:	ebb2 0408 	subs.w	r4, r2, r8
 8003426:	eb63 0509 	sbc.w	r5, r3, r9
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	00eb      	lsls	r3, r5, #3
 8003434:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003438:	00e2      	lsls	r2, r4, #3
 800343a:	4614      	mov	r4, r2
 800343c:	461d      	mov	r5, r3
 800343e:	eb14 030a 	adds.w	r3, r4, sl
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	eb45 030b 	adc.w	r3, r5, fp
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003456:	4629      	mov	r1, r5
 8003458:	028b      	lsls	r3, r1, #10
 800345a:	4621      	mov	r1, r4
 800345c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003460:	4621      	mov	r1, r4
 8003462:	028a      	lsls	r2, r1, #10
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346a:	2200      	movs	r2, #0
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	60fa      	str	r2, [r7, #12]
 8003470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003474:	f7fc ff04 	bl	8000280 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	3301      	adds	r3, #1
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800349a:	e002      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800349e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3740      	adds	r7, #64	; 0x40
 80034a8:	46bd      	mov	sp, r7
 80034aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	017d7840 	.word	0x017d7840

080034bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a9b      	lsrs	r3, r3, #10
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4903      	ldr	r1, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	080047dc 	.word	0x080047dc

080034fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e07b      	b.n	8003606 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d108      	bne.n	8003528 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351e:	d009      	beq.n	8003534 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	61da      	str	r2, [r3, #28]
 8003526:	e005      	b.n	8003534 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fbbe 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	ea42 0103 	orr.w	r1, r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	f003 0104 	and.w	r1, r3, #4
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f003 0210 	and.w	r2, r3, #16
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	4613      	mov	r3, r2
 800361c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_SPI_Transmit_DMA+0x20>
 800362c:	2302      	movs	r3, #2
 800362e:	e09b      	b.n	8003768 <HAL_SPI_Transmit_DMA+0x158>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d002      	beq.n	800364a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003644:	2302      	movs	r3, #2
 8003646:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003648:	e089      	b.n	800375e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_SPI_Transmit_DMA+0x46>
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
    goto error;
 800365a:	e080      	b.n	800375e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2203      	movs	r2, #3
 8003660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	88fa      	ldrh	r2, [r7, #6]
 800367a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a2:	d10f      	bne.n	80036c4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	4a29      	ldr	r2, [pc, #164]	; (8003770 <HAL_SPI_Transmit_DMA+0x160>)
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	4a28      	ldr	r2, [pc, #160]	; (8003774 <HAL_SPI_Transmit_DMA+0x164>)
 80036d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d8:	4a27      	ldr	r2, [pc, #156]	; (8003778 <HAL_SPI_Transmit_DMA+0x168>)
 80036da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e0:	2200      	movs	r2, #0
 80036e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	4619      	mov	r1, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036fc:	f7fd fe9a 	bl	8001434 <HAL_DMA_Start_IT>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	f043 0210 	orr.w	r2, r3, #16
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800371e:	e01e      	b.n	800375e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d007      	beq.n	800373e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0220 	orr.w	r2, r2, #32
 800374c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0202 	orr.w	r2, r2, #2
 800375c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003766:	7dfb      	ldrb	r3, [r7, #23]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	08003861 	.word	0x08003861
 8003774:	080037b9 	.word	0x080037b9
 8003778:	0800387d 	.word	0x0800387d

0800377c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c6:	f7fd fc45 	bl	8001054 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037da:	d03b      	beq.n	8003854 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0220 	bic.w	r2, r2, #32
 80037ea:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0202 	bic.w	r2, r2, #2
 80037fa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	2164      	movs	r1, #100	; 0x64
 8003800:	6978      	ldr	r0, [r7, #20]
 8003802:	f000 f8e3 	bl	80039cc <SPI_EndRxTxTransaction>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800384c:	6978      	ldr	r0, [r7, #20]
 800384e:	f7ff ffa9 	bl	80037a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003852:	e002      	b.n	800385a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003854:	6978      	ldr	r0, [r7, #20]
 8003856:	f7ff ff91 	bl	800377c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7ff ff8e 	bl	8003790 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0203 	bic.w	r2, r2, #3
 8003898:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f043 0210 	orr.w	r2, r3, #16
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff ff78 	bl	80037a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038cc:	f7fd fbc2 	bl	8001054 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	4413      	add	r3, r2
 80038da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038dc:	f7fd fbba 	bl	8001054 <HAL_GetTick>
 80038e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038e2:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	015b      	lsls	r3, r3, #5
 80038e8:	0d1b      	lsrs	r3, r3, #20
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038f2:	e054      	b.n	800399e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d050      	beq.n	800399e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038fc:	f7fd fbaa 	bl	8001054 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	429a      	cmp	r2, r3
 800390a:	d902      	bls.n	8003912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d13d      	bne.n	800398e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392a:	d111      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003934:	d004      	beq.n	8003940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d107      	bne.n	8003950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003958:	d10f      	bne.n	800397a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e017      	b.n	80039be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3b01      	subs	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4013      	ands	r3, r2
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	bf0c      	ite	eq
 80039ae:	2301      	moveq	r3, #1
 80039b0:	2300      	movne	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d19b      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000000 	.word	0x20000000

080039cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <SPI_EndRxTxTransaction+0x7c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1b      	ldr	r2, [pc, #108]	; (8003a4c <SPI_EndRxTxTransaction+0x80>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0d5b      	lsrs	r3, r3, #21
 80039e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f6:	d112      	bne.n	8003a1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2200      	movs	r2, #0
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff ff5a 	bl	80038bc <SPI_WaitFlagStateUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d016      	beq.n	8003a3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e00f      	b.n	8003a3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d0f2      	beq.n	8003a1e <SPI_EndRxTxTransaction+0x52>
 8003a38:	e000      	b.n	8003a3c <SPI_EndRxTxTransaction+0x70>
        break;
 8003a3a:	bf00      	nop
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	165e9f81 	.word	0x165e9f81

08003a50 <ST7735_Send_Command>:
 * @param Transmission = Choosing whether to send a command or send a value to the registration address
 *
 * @retval None
 */
void ST7735_Send_Command(uint8_t command,uint8_t value,transmission_type_t Transmission)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	71bb      	strb	r3, [r7, #6]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	717b      	strb	r3, [r7, #5]
	uint8_t Command[1]= {0};
 8003a62:	2300      	movs	r3, #0
 8003a64:	733b      	strb	r3, [r7, #12]
	Command[0]=command;
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	733b      	strb	r3, [r7, #12]
	if (Transmission == Command_Transmit) {
 8003a6a:	797b      	ldrb	r3, [r7, #5]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d116      	bne.n	8003a9e <ST7735_Send_Command+0x4e>
		HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8003a70:	2200      	movs	r2, #0
 8003a72:	2101      	movs	r1, #1
 8003a74:	481c      	ldr	r0, [pc, #112]	; (8003ae8 <ST7735_Send_Command+0x98>)
 8003a76:	f7fe f923 	bl	8001cc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	481a      	ldr	r0, [pc, #104]	; (8003ae8 <ST7735_Send_Command+0x98>)
 8003a80:	f7fe f91e 	bl	8001cc0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(ST7735, Command, 1);
 8003a84:	f107 030c 	add.w	r3, r7, #12
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4817      	ldr	r0, [pc, #92]	; (8003aec <ST7735_Send_Command+0x9c>)
 8003a8e:	f7ff fdbf 	bl	8003610 <HAL_SPI_Transmit_DMA>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003a92:	2201      	movs	r2, #1
 8003a94:	2104      	movs	r1, #4
 8003a96:	4814      	ldr	r0, [pc, #80]	; (8003ae8 <ST7735_Send_Command+0x98>)
 8003a98:	f7fe f912 	bl	8001cc0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(ST7735, Command, 1);
		HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
		HAL_SPI_Transmit_DMA(ST7735,&value,1);
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
	}
}
 8003a9c:	e020      	b.n	8003ae0 <ST7735_Send_Command+0x90>
		HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4811      	ldr	r0, [pc, #68]	; (8003ae8 <ST7735_Send_Command+0x98>)
 8003aa4:	f7fe f90c 	bl	8001cc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2104      	movs	r1, #4
 8003aac:	480e      	ldr	r0, [pc, #56]	; (8003ae8 <ST7735_Send_Command+0x98>)
 8003aae:	f7fe f907 	bl	8001cc0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(ST7735, Command, 1);
 8003ab2:	f107 030c 	add.w	r3, r7, #12
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4619      	mov	r1, r3
 8003aba:	480c      	ldr	r0, [pc, #48]	; (8003aec <ST7735_Send_Command+0x9c>)
 8003abc:	f7ff fda8 	bl	8003610 <HAL_SPI_Transmit_DMA>
		HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	4808      	ldr	r0, [pc, #32]	; (8003ae8 <ST7735_Send_Command+0x98>)
 8003ac6:	f7fe f8fb 	bl	8001cc0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_DMA(ST7735,&value,1);
 8003aca:	1dbb      	adds	r3, r7, #6
 8003acc:	2201      	movs	r2, #1
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4806      	ldr	r0, [pc, #24]	; (8003aec <ST7735_Send_Command+0x9c>)
 8003ad2:	f7ff fd9d 	bl	8003610 <HAL_SPI_Transmit_DMA>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	2104      	movs	r1, #4
 8003ada:	4803      	ldr	r0, [pc, #12]	; (8003ae8 <ST7735_Send_Command+0x98>)
 8003adc:	f7fe f8f0 	bl	8001cc0 <HAL_GPIO_WritePin>
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40020400 	.word	0x40020400
 8003aec:	20000100 	.word	0x20000100

08003af0 <ST7735_Sending_Command_Data>:
 *@param number_of_bytes = Specifies the number of bytes to send
 *
 *@retval None
 */
void ST7735_Sending_Command_Data(uint8_t command, uint8_t *data,uint8_t number_of_bytes)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	6039      	str	r1, [r7, #0]
 8003afa:	71fb      	strb	r3, [r7, #7]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71bb      	strb	r3, [r7, #6]
    uint8_t Command_write[1]={0};
 8003b00:	2300      	movs	r3, #0
 8003b02:	733b      	strb	r3, [r7, #12]
    Command_write[0]=command;
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4811      	ldr	r0, [pc, #68]	; (8003b54 <ST7735_Sending_Command_Data+0x64>)
 8003b0e:	f7fe f8d7 	bl	8001cc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2104      	movs	r1, #4
 8003b16:	480f      	ldr	r0, [pc, #60]	; (8003b54 <ST7735_Sending_Command_Data+0x64>)
 8003b18:	f7fe f8d2 	bl	8001cc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(ST7735,Command_write,1);
 8003b1c:	f107 030c 	add.w	r3, r7, #12
 8003b20:	2201      	movs	r2, #1
 8003b22:	4619      	mov	r1, r3
 8003b24:	480c      	ldr	r0, [pc, #48]	; (8003b58 <ST7735_Sending_Command_Data+0x68>)
 8003b26:	f7ff fd73 	bl	8003610 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4809      	ldr	r0, [pc, #36]	; (8003b54 <ST7735_Sending_Command_Data+0x64>)
 8003b30:	f7fe f8c6 	bl	8001cc0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(ST7735,&(*data),number_of_bytes);
 8003b34:	79bb      	ldrb	r3, [r7, #6]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6839      	ldr	r1, [r7, #0]
 8003b3c:	4806      	ldr	r0, [pc, #24]	; (8003b58 <ST7735_Sending_Command_Data+0x68>)
 8003b3e:	f7ff fd67 	bl	8003610 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003b42:	2201      	movs	r2, #1
 8003b44:	2104      	movs	r1, #4
 8003b46:	4803      	ldr	r0, [pc, #12]	; (8003b54 <ST7735_Sending_Command_Data+0x64>)
 8003b48:	f7fe f8ba 	bl	8001cc0 <HAL_GPIO_WritePin>
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40020400 	.word	0x40020400
 8003b58:	20000100 	.word	0x20000100

08003b5c <ST7735_Background_Colour>:
 * @param colour = Holds the background color value
 *
 * @retval None
 */
void ST7735_Background_Colour(uint16_t colour)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0; i<new_row_number; i++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	e013      	b.n	8003b94 <ST7735_Background_Colour+0x38>
	{
		for(uint8_t j=0; j<new_column_number; j++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73bb      	strb	r3, [r7, #14]
 8003b70:	e008      	b.n	8003b84 <ST7735_Background_Colour+0x28>
		{
         ST7735_Draw_Pixel(j, i, colour);
 8003b72:	88fa      	ldrh	r2, [r7, #6]
 8003b74:	7bf9      	ldrb	r1, [r7, #15]
 8003b76:	7bbb      	ldrb	r3, [r7, #14]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f88d 	bl	8003c98 <ST7735_Draw_Pixel>
		for(uint8_t j=0; j<new_column_number; j++)
 8003b7e:	7bbb      	ldrb	r3, [r7, #14]
 8003b80:	3301      	adds	r3, #1
 8003b82:	73bb      	strb	r3, [r7, #14]
 8003b84:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <ST7735_Background_Colour+0x4c>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	7bba      	ldrb	r2, [r7, #14]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d3f1      	bcc.n	8003b72 <ST7735_Background_Colour+0x16>
	for(uint8_t i=0; i<new_row_number; i++)
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	3301      	adds	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <ST7735_Background_Colour+0x50>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d3e6      	bcc.n	8003b6c <ST7735_Background_Colour+0x10>
		}
	}

}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000221 	.word	0x20000221
 8003bac:	20000220 	.word	0x20000220

08003bb0 <ST7735_TFT_Init>:
 * @param starting_position = Gets the value to reflect the screen in the desired direction
 *
 * @retval None
 */
void ST7735_TFT_Init(Screen_Dırection_Select_t starting_position)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	71fb      	strb	r3, [r7, #7]
	uint8_t MADCTL_REG_VALUE=0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73fb      	strb	r3, [r7, #15]
    STT7735_Reset();
 8003bbe:	f000 f92a 	bl	8003e16 <STT7735_Reset>
	ST7735_Send_Command(SLPOUT_REG_ADDR,0,Command_Transmit);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	2011      	movs	r0, #17
 8003bc8:	f7ff ff42 	bl	8003a50 <ST7735_Send_Command>
	ST7735_Send_Command(NORON_REG_ADDR,0,Command_Transmit);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2100      	movs	r1, #0
 8003bd0:	2013      	movs	r0, #19
 8003bd2:	f7ff ff3d 	bl	8003a50 <ST7735_Send_Command>
	ST7735_Send_Command(INVOFF_REG_ADDR,0,Command_Transmit);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2100      	movs	r1, #0
 8003bda:	2020      	movs	r0, #32
 8003bdc:	f7ff ff38 	bl	8003a50 <ST7735_Send_Command>
	ST7735_Send_Command(IDMOFF_REG_ADDR,0,Command_Transmit);
 8003be0:	2200      	movs	r2, #0
 8003be2:	2100      	movs	r1, #0
 8003be4:	2038      	movs	r0, #56	; 0x38
 8003be6:	f7ff ff33 	bl	8003a50 <ST7735_Send_Command>
	ST7735_Send_Command(DISPON_REG_ADDR,0,Command_Transmit);
 8003bea:	2200      	movs	r2, #0
 8003bec:	2100      	movs	r1, #0
 8003bee:	2029      	movs	r0, #41	; 0x29
 8003bf0:	f7ff ff2e 	bl	8003a50 <ST7735_Send_Command>
	ST7735_Send_Command(COLMOD_REG_ADDR,INTERFACE_16BIT_PIXEL_FORMAT,Data_Transmit);
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	2105      	movs	r1, #5
 8003bf8:	203a      	movs	r0, #58	; 0x3a
 8003bfa:	f7ff ff29 	bl	8003a50 <ST7735_Send_Command>


	switch(starting_position)
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d83a      	bhi.n	8003c7a <ST7735_TFT_Init+0xca>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <ST7735_TFT_Init+0x5c>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c21 	.word	0x08003c21
 8003c10:	08003c33 	.word	0x08003c33
 8003c14:	08003c45 	.word	0x08003c45
 8003c18:	08003c57 	.word	0x08003c57
 8003c1c:	08003c69 	.word	0x08003c69
	{
	case SCREEN_0_DEGREE_ROTATION:
		MADCTL_REG_VALUE = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
		new_column_number = ST7735_LCD_COLUMN;
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <ST7735_TFT_Init+0xe0>)
 8003c26:	2284      	movs	r2, #132	; 0x84
 8003c28:	701a      	strb	r2, [r3, #0]
		new_row_number = ST7735_LCD_ROW;
 8003c2a:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <ST7735_TFT_Init+0xe4>)
 8003c2c:	22a2      	movs	r2, #162	; 0xa2
 8003c2e:	701a      	strb	r2, [r3, #0]
		break;
 8003c30:	e023      	b.n	8003c7a <ST7735_TFT_Init+0xca>

	case SCREEN_90_DEGREE_ROTATION:
		MADCTL_REG_VALUE = MADCTL_EXCHANGE_X_MIRROR;
 8003c32:	2360      	movs	r3, #96	; 0x60
 8003c34:	73fb      	strb	r3, [r7, #15]
		new_column_number = ST7735_LCD_ROW;
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <ST7735_TFT_Init+0xe0>)
 8003c38:	22a2      	movs	r2, #162	; 0xa2
 8003c3a:	701a      	strb	r2, [r3, #0]
		new_row_number = ST7735_LCD_COLUMN;
 8003c3c:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <ST7735_TFT_Init+0xe4>)
 8003c3e:	2284      	movs	r2, #132	; 0x84
 8003c40:	701a      	strb	r2, [r3, #0]
		break;
 8003c42:	e01a      	b.n	8003c7a <ST7735_TFT_Init+0xca>

	case SCREEN_180_DEGREE_ROTATION:
		MADCTL_REG_VALUE = MADCTL_XY_MIROR;
 8003c44:	23c0      	movs	r3, #192	; 0xc0
 8003c46:	73fb      	strb	r3, [r7, #15]
		new_column_number = ST7735_LCD_COLUMN;
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <ST7735_TFT_Init+0xe0>)
 8003c4a:	2284      	movs	r2, #132	; 0x84
 8003c4c:	701a      	strb	r2, [r3, #0]
		new_row_number = ST7735_LCD_ROW;
 8003c4e:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <ST7735_TFT_Init+0xe4>)
 8003c50:	22a2      	movs	r2, #162	; 0xa2
 8003c52:	701a      	strb	r2, [r3, #0]
		break;
 8003c54:	e011      	b.n	8003c7a <ST7735_TFT_Init+0xca>

	case SCREEN_270_DEGREE_ROTATION:
		MADCTL_REG_VALUE = MADCTL_EXCHANGE_Y_MIRROR;
 8003c56:	23a0      	movs	r3, #160	; 0xa0
 8003c58:	73fb      	strb	r3, [r7, #15]
		new_column_number = ST7735_LCD_ROW;
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <ST7735_TFT_Init+0xe0>)
 8003c5c:	22a2      	movs	r2, #162	; 0xa2
 8003c5e:	701a      	strb	r2, [r3, #0]
		new_row_number = ST7735_LCD_COLUMN;
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <ST7735_TFT_Init+0xe4>)
 8003c62:	2284      	movs	r2, #132	; 0x84
 8003c64:	701a      	strb	r2, [r3, #0]
		break;
 8003c66:	e008      	b.n	8003c7a <ST7735_TFT_Init+0xca>

	case SCREEN_360_DEGREE_ROTATION:
		MADCTL_REG_VALUE = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]
		new_column_number = ST7735_LCD_COLUMN;
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <ST7735_TFT_Init+0xe0>)
 8003c6e:	2284      	movs	r2, #132	; 0x84
 8003c70:	701a      	strb	r2, [r3, #0]
		new_row_number = ST7735_LCD_ROW;
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <ST7735_TFT_Init+0xe4>)
 8003c74:	22a2      	movs	r2, #162	; 0xa2
 8003c76:	701a      	strb	r2, [r3, #0]
		break;
 8003c78:	bf00      	nop
	}
	 ST7735_Send_Command(MADCTL_REG_ADDR,MADCTL_REG_VALUE, Data_Transmit);
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4619      	mov	r1, r3
 8003c80:	2036      	movs	r0, #54	; 0x36
 8003c82:	f7ff fee5 	bl	8003a50 <ST7735_Send_Command>
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000221 	.word	0x20000221
 8003c94:	20000220 	.word	0x20000220

08003c98 <ST7735_Draw_Pixel>:
 * @param colour = pixel gets the desired color value
 *
 * @retval None
 */
void ST7735_Draw_Pixel(uint8_t x,uint8_t y,uint16_t colour)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	71bb      	strb	r3, [r7, #6]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80bb      	strh	r3, [r7, #4]
	uint8_t row[4],column[4], colour_select[2];
	colour_select[0] = ((colour & 0xff00)>>8);
 8003caa:	88bb      	ldrh	r3, [r7, #4]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	733b      	strb	r3, [r7, #12]
	colour_select[1] = ((colour & 0x00ff)<<0);
 8003cb4:	88bb      	ldrh	r3, [r7, #4]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	737b      	strb	r3, [r7, #13]
	((uint32_t*) row)[0] = (((y & 0xFF) << 24) | ((y & 0xFF00) << 8)| ((y & 0xFF) << 8) | ((y & 0xFF00) >> 8));
 8003cba:	79bb      	ldrb	r3, [r7, #6]
 8003cbc:	061a      	lsls	r2, r3, #24
 8003cbe:	79bb      	ldrb	r3, [r7, #6]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	79bb      	ldrb	r3, [r7, #6]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	f107 0314 	add.w	r3, r7, #20
 8003cd2:	601a      	str	r2, [r3, #0]
	ST7735_Sending_Command_Data(RASET_REG_ADDR, row, 4);
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	2204      	movs	r2, #4
 8003cda:	4619      	mov	r1, r3
 8003cdc:	202b      	movs	r0, #43	; 0x2b
 8003cde:	f7ff ff07 	bl	8003af0 <ST7735_Sending_Command_Data>
	((uint32_t*) column)[0] = (((x & 0xFF) << 24) | ((x & 0xFF00) << 8)| ((x & 0xFF) << 8) | ((x & 0xFF00) >> 8));
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	061a      	lsls	r2, r3, #24
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	f107 0310 	add.w	r3, r7, #16
 8003cfa:	601a      	str	r2, [r3, #0]
	ST7735_Sending_Command_Data(CASET_REG_ADDR, column, 4);
 8003cfc:	f107 0310 	add.w	r3, r7, #16
 8003d00:	2204      	movs	r2, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	202a      	movs	r0, #42	; 0x2a
 8003d06:	f7ff fef3 	bl	8003af0 <ST7735_Sending_Command_Data>
	ST7735_Sending_Command_Data(RAMWR_REG_ADDR,colour_select,2);
 8003d0a:	f107 030c 	add.w	r3, r7, #12
 8003d0e:	2202      	movs	r2, #2
 8003d10:	4619      	mov	r1, r3
 8003d12:	202c      	movs	r0, #44	; 0x2c
 8003d14:	f7ff feec 	bl	8003af0 <ST7735_Sending_Command_Data>
}
 8003d18:	bf00      	nop
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <ST7735_String>:
 *
 * @retval None
 *
 */
void ST7735_String(uint8_t starting_column, uint8_t starting_row, char*string, sFONT*Font_select, uint16_t String_colour,uint16_t Background_Colour)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60ba      	str	r2, [r7, #8]
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	73bb      	strb	r3, [r7, #14]
	uint8_t x,y,counter,x_update,size_definiton;
	uint16_t pixel_value,character_index;
	x=starting_column,y=starting_row;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	7bbb      	ldrb	r3, [r7, #14]
 8003d38:	757b      	strb	r3, [r7, #21]
	while(*string != '\0')
 8003d3a:	e063      	b.n	8003e04 <ST7735_String+0xe4>
	{
		character_index=(*string)-32;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b20      	subs	r3, #32
 8003d44:	833b      	strh	r3, [r7, #24]
		character_index*=(Font_select->Height*Font_select->Size);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	88da      	ldrh	r2, [r3, #6]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7a1b      	ldrb	r3, [r3, #8]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	fb12 f303 	smulbb	r3, r2, r3
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	8b3a      	ldrh	r2, [r7, #24]
 8003d58:	fb12 f303 	smulbb	r3, r2, r3
 8003d5c:	833b      	strh	r3, [r7, #24]
		for(uint8_t _y=y; _y<(y+Font_select->Height); _y++)
 8003d5e:	7d7b      	ldrb	r3, [r7, #21]
 8003d60:	75fb      	strb	r3, [r7, #23]
 8003d62:	e03f      	b.n	8003de4 <ST7735_String+0xc4>
		{
			size_definiton=1;
 8003d64:	2301      	movs	r3, #1
 8003d66:	773b      	strb	r3, [r7, #28]
			x_update=x;
 8003d68:	7ffb      	ldrb	r3, [r7, #31]
 8003d6a:	777b      	strb	r3, [r7, #29]
			run:
			counter = 7;
 8003d6c:	2307      	movs	r3, #7
 8003d6e:	77bb      	strb	r3, [r7, #30]

			for(uint8_t i=0 ; i<8; i++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	75bb      	strb	r3, [r7, #22]
 8003d74:	e020      	b.n	8003db8 <ST7735_String+0x98>
			{
				if(Font_select->table[character_index] & (0x01<<counter))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	8b3b      	ldrh	r3, [r7, #24]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	7fbb      	ldrb	r3, [r7, #30]
 8003d84:	fa42 f303 	asr.w	r3, r2, r3
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <ST7735_String+0x76>
					pixel_value=String_colour;
 8003d90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d92:	837b      	strh	r3, [r7, #26]
 8003d94:	e001      	b.n	8003d9a <ST7735_String+0x7a>
				else
					pixel_value=Background_Colour;
 8003d96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d98:	837b      	strh	r3, [r7, #26]

				ST7735_Draw_Pixel(x_update, _y, pixel_value);
 8003d9a:	8b7a      	ldrh	r2, [r7, #26]
 8003d9c:	7df9      	ldrb	r1, [r7, #23]
 8003d9e:	7f7b      	ldrb	r3, [r7, #29]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff79 	bl	8003c98 <ST7735_Draw_Pixel>
				counter--;
 8003da6:	7fbb      	ldrb	r3, [r7, #30]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	77bb      	strb	r3, [r7, #30]
				x_update++;
 8003dac:	7f7b      	ldrb	r3, [r7, #29]
 8003dae:	3301      	adds	r3, #1
 8003db0:	777b      	strb	r3, [r7, #29]
			for(uint8_t i=0 ; i<8; i++)
 8003db2:	7dbb      	ldrb	r3, [r7, #22]
 8003db4:	3301      	adds	r3, #1
 8003db6:	75bb      	strb	r3, [r7, #22]
 8003db8:	7dbb      	ldrb	r3, [r7, #22]
 8003dba:	2b07      	cmp	r3, #7
 8003dbc:	d9db      	bls.n	8003d76 <ST7735_String+0x56>
			}
			character_index++;
 8003dbe:	8b3b      	ldrh	r3, [r7, #24]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	833b      	strh	r3, [r7, #24]
			if((Font_select->Size>1) && (Font_select->Size != size_definiton) )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	7a1b      	ldrb	r3, [r3, #8]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d908      	bls.n	8003dde <ST7735_String+0xbe>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7a1b      	ldrb	r3, [r3, #8]
 8003dd0:	7f3a      	ldrb	r2, [r7, #28]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d003      	beq.n	8003dde <ST7735_String+0xbe>
			{
				size_definiton++;
 8003dd6:	7f3b      	ldrb	r3, [r7, #28]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	773b      	strb	r3, [r7, #28]
			    goto run;
 8003ddc:	e7c6      	b.n	8003d6c <ST7735_String+0x4c>
		for(uint8_t _y=y; _y<(y+Font_select->Height); _y++)
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	3301      	adds	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
 8003de4:	7dfa      	ldrb	r2, [r7, #23]
 8003de6:	7d7b      	ldrb	r3, [r7, #21]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	88c9      	ldrh	r1, [r1, #6]
 8003dec:	440b      	add	r3, r1
 8003dee:	429a      	cmp	r2, r3
 8003df0:	dbb8      	blt.n	8003d64 <ST7735_String+0x44>
			}
		}
		string++;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	3301      	adds	r3, #1
 8003df6:	60bb      	str	r3, [r7, #8]
		x+=Font_select->Width;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	889b      	ldrh	r3, [r3, #4]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	7ffb      	ldrb	r3, [r7, #31]
 8003e00:	4413      	add	r3, r2
 8003e02:	77fb      	strb	r3, [r7, #31]
	while(*string != '\0')
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d197      	bne.n	8003d3c <ST7735_String+0x1c>

	}
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <STT7735_Reset>:
 * @param none
 *
 * @retval None
 */
void STT7735_Reset(void)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	af00      	add	r7, sp, #0
	ST7735_Send_Command(SWRESET_REG_ADDR,0,Command_Transmit);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	2001      	movs	r0, #1
 8003e20:	f7ff fe16 	bl	8003a50 <ST7735_Send_Command>
	HAL_Delay(120);
 8003e24:	2078      	movs	r0, #120	; 0x78
 8003e26:	f7fd f921 	bl	800106c <HAL_Delay>
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <__errno>:
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <__errno+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000018 	.word	0x20000018

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	4d0d      	ldr	r5, [pc, #52]	; (8003e74 <__libc_init_array+0x38>)
 8003e40:	4c0d      	ldr	r4, [pc, #52]	; (8003e78 <__libc_init_array+0x3c>)
 8003e42:	1b64      	subs	r4, r4, r5
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	2600      	movs	r6, #0
 8003e48:	42a6      	cmp	r6, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	4d0b      	ldr	r5, [pc, #44]	; (8003e7c <__libc_init_array+0x40>)
 8003e4e:	4c0c      	ldr	r4, [pc, #48]	; (8003e80 <__libc_init_array+0x44>)
 8003e50:	f000 fc8e 	bl	8004770 <_init>
 8003e54:	1b64      	subs	r4, r4, r5
 8003e56:	10a4      	asrs	r4, r4, #2
 8003e58:	2600      	movs	r6, #0
 8003e5a:	42a6      	cmp	r6, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e64:	4798      	blx	r3
 8003e66:	3601      	adds	r6, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6e:	4798      	blx	r3
 8003e70:	3601      	adds	r6, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	08005408 	.word	0x08005408
 8003e78:	08005408 	.word	0x08005408
 8003e7c:	08005408 	.word	0x08005408
 8003e80:	0800540c 	.word	0x0800540c

08003e84 <memset>:
 8003e84:	4402      	add	r2, r0
 8003e86:	4603      	mov	r3, r0
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d100      	bne.n	8003e8e <memset+0xa>
 8003e8c:	4770      	bx	lr
 8003e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e92:	e7f9      	b.n	8003e88 <memset+0x4>

08003e94 <siprintf>:
 8003e94:	b40e      	push	{r1, r2, r3}
 8003e96:	b500      	push	{lr}
 8003e98:	b09c      	sub	sp, #112	; 0x70
 8003e9a:	ab1d      	add	r3, sp, #116	; 0x74
 8003e9c:	9002      	str	r0, [sp, #8]
 8003e9e:	9006      	str	r0, [sp, #24]
 8003ea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ea4:	4809      	ldr	r0, [pc, #36]	; (8003ecc <siprintf+0x38>)
 8003ea6:	9107      	str	r1, [sp, #28]
 8003ea8:	9104      	str	r1, [sp, #16]
 8003eaa:	4909      	ldr	r1, [pc, #36]	; (8003ed0 <siprintf+0x3c>)
 8003eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eb0:	9105      	str	r1, [sp, #20]
 8003eb2:	6800      	ldr	r0, [r0, #0]
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	a902      	add	r1, sp, #8
 8003eb8:	f000 f868 	bl	8003f8c <_svfiprintf_r>
 8003ebc:	9b02      	ldr	r3, [sp, #8]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	b01c      	add	sp, #112	; 0x70
 8003ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ec8:	b003      	add	sp, #12
 8003eca:	4770      	bx	lr
 8003ecc:	20000018 	.word	0x20000018
 8003ed0:	ffff0208 	.word	0xffff0208

08003ed4 <__ssputs_r>:
 8003ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed8:	688e      	ldr	r6, [r1, #8]
 8003eda:	429e      	cmp	r6, r3
 8003edc:	4682      	mov	sl, r0
 8003ede:	460c      	mov	r4, r1
 8003ee0:	4690      	mov	r8, r2
 8003ee2:	461f      	mov	r7, r3
 8003ee4:	d838      	bhi.n	8003f58 <__ssputs_r+0x84>
 8003ee6:	898a      	ldrh	r2, [r1, #12]
 8003ee8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003eec:	d032      	beq.n	8003f54 <__ssputs_r+0x80>
 8003eee:	6825      	ldr	r5, [r4, #0]
 8003ef0:	6909      	ldr	r1, [r1, #16]
 8003ef2:	eba5 0901 	sub.w	r9, r5, r1
 8003ef6:	6965      	ldr	r5, [r4, #20]
 8003ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003efc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f00:	3301      	adds	r3, #1
 8003f02:	444b      	add	r3, r9
 8003f04:	106d      	asrs	r5, r5, #1
 8003f06:	429d      	cmp	r5, r3
 8003f08:	bf38      	it	cc
 8003f0a:	461d      	movcc	r5, r3
 8003f0c:	0553      	lsls	r3, r2, #21
 8003f0e:	d531      	bpl.n	8003f74 <__ssputs_r+0xa0>
 8003f10:	4629      	mov	r1, r5
 8003f12:	f000 fb63 	bl	80045dc <_malloc_r>
 8003f16:	4606      	mov	r6, r0
 8003f18:	b950      	cbnz	r0, 8003f30 <__ssputs_r+0x5c>
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	f8ca 3000 	str.w	r3, [sl]
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f30:	6921      	ldr	r1, [r4, #16]
 8003f32:	464a      	mov	r2, r9
 8003f34:	f000 fabe 	bl	80044b4 <memcpy>
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f42:	81a3      	strh	r3, [r4, #12]
 8003f44:	6126      	str	r6, [r4, #16]
 8003f46:	6165      	str	r5, [r4, #20]
 8003f48:	444e      	add	r6, r9
 8003f4a:	eba5 0509 	sub.w	r5, r5, r9
 8003f4e:	6026      	str	r6, [r4, #0]
 8003f50:	60a5      	str	r5, [r4, #8]
 8003f52:	463e      	mov	r6, r7
 8003f54:	42be      	cmp	r6, r7
 8003f56:	d900      	bls.n	8003f5a <__ssputs_r+0x86>
 8003f58:	463e      	mov	r6, r7
 8003f5a:	6820      	ldr	r0, [r4, #0]
 8003f5c:	4632      	mov	r2, r6
 8003f5e:	4641      	mov	r1, r8
 8003f60:	f000 fab6 	bl	80044d0 <memmove>
 8003f64:	68a3      	ldr	r3, [r4, #8]
 8003f66:	1b9b      	subs	r3, r3, r6
 8003f68:	60a3      	str	r3, [r4, #8]
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	4433      	add	r3, r6
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	2000      	movs	r0, #0
 8003f72:	e7db      	b.n	8003f2c <__ssputs_r+0x58>
 8003f74:	462a      	mov	r2, r5
 8003f76:	f000 fba5 	bl	80046c4 <_realloc_r>
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d1e1      	bne.n	8003f44 <__ssputs_r+0x70>
 8003f80:	6921      	ldr	r1, [r4, #16]
 8003f82:	4650      	mov	r0, sl
 8003f84:	f000 fabe 	bl	8004504 <_free_r>
 8003f88:	e7c7      	b.n	8003f1a <__ssputs_r+0x46>
	...

08003f8c <_svfiprintf_r>:
 8003f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f90:	4698      	mov	r8, r3
 8003f92:	898b      	ldrh	r3, [r1, #12]
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	b09d      	sub	sp, #116	; 0x74
 8003f98:	4607      	mov	r7, r0
 8003f9a:	460d      	mov	r5, r1
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	d50e      	bpl.n	8003fbe <_svfiprintf_r+0x32>
 8003fa0:	690b      	ldr	r3, [r1, #16]
 8003fa2:	b963      	cbnz	r3, 8003fbe <_svfiprintf_r+0x32>
 8003fa4:	2140      	movs	r1, #64	; 0x40
 8003fa6:	f000 fb19 	bl	80045dc <_malloc_r>
 8003faa:	6028      	str	r0, [r5, #0]
 8003fac:	6128      	str	r0, [r5, #16]
 8003fae:	b920      	cbnz	r0, 8003fba <_svfiprintf_r+0x2e>
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	e0d1      	b.n	800415e <_svfiprintf_r+0x1d2>
 8003fba:	2340      	movs	r3, #64	; 0x40
 8003fbc:	616b      	str	r3, [r5, #20]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc2:	2320      	movs	r3, #32
 8003fc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fcc:	2330      	movs	r3, #48	; 0x30
 8003fce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004178 <_svfiprintf_r+0x1ec>
 8003fd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fd6:	f04f 0901 	mov.w	r9, #1
 8003fda:	4623      	mov	r3, r4
 8003fdc:	469a      	mov	sl, r3
 8003fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fe2:	b10a      	cbz	r2, 8003fe8 <_svfiprintf_r+0x5c>
 8003fe4:	2a25      	cmp	r2, #37	; 0x25
 8003fe6:	d1f9      	bne.n	8003fdc <_svfiprintf_r+0x50>
 8003fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8003fec:	d00b      	beq.n	8004006 <_svfiprintf_r+0x7a>
 8003fee:	465b      	mov	r3, fp
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	f7ff ff6d 	bl	8003ed4 <__ssputs_r>
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	f000 80aa 	beq.w	8004154 <_svfiprintf_r+0x1c8>
 8004000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004002:	445a      	add	r2, fp
 8004004:	9209      	str	r2, [sp, #36]	; 0x24
 8004006:	f89a 3000 	ldrb.w	r3, [sl]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 80a2 	beq.w	8004154 <_svfiprintf_r+0x1c8>
 8004010:	2300      	movs	r3, #0
 8004012:	f04f 32ff 	mov.w	r2, #4294967295
 8004016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800401a:	f10a 0a01 	add.w	sl, sl, #1
 800401e:	9304      	str	r3, [sp, #16]
 8004020:	9307      	str	r3, [sp, #28]
 8004022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004026:	931a      	str	r3, [sp, #104]	; 0x68
 8004028:	4654      	mov	r4, sl
 800402a:	2205      	movs	r2, #5
 800402c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004030:	4851      	ldr	r0, [pc, #324]	; (8004178 <_svfiprintf_r+0x1ec>)
 8004032:	f7fc f8d5 	bl	80001e0 <memchr>
 8004036:	9a04      	ldr	r2, [sp, #16]
 8004038:	b9d8      	cbnz	r0, 8004072 <_svfiprintf_r+0xe6>
 800403a:	06d0      	lsls	r0, r2, #27
 800403c:	bf44      	itt	mi
 800403e:	2320      	movmi	r3, #32
 8004040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004044:	0711      	lsls	r1, r2, #28
 8004046:	bf44      	itt	mi
 8004048:	232b      	movmi	r3, #43	; 0x2b
 800404a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800404e:	f89a 3000 	ldrb.w	r3, [sl]
 8004052:	2b2a      	cmp	r3, #42	; 0x2a
 8004054:	d015      	beq.n	8004082 <_svfiprintf_r+0xf6>
 8004056:	9a07      	ldr	r2, [sp, #28]
 8004058:	4654      	mov	r4, sl
 800405a:	2000      	movs	r0, #0
 800405c:	f04f 0c0a 	mov.w	ip, #10
 8004060:	4621      	mov	r1, r4
 8004062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004066:	3b30      	subs	r3, #48	; 0x30
 8004068:	2b09      	cmp	r3, #9
 800406a:	d94e      	bls.n	800410a <_svfiprintf_r+0x17e>
 800406c:	b1b0      	cbz	r0, 800409c <_svfiprintf_r+0x110>
 800406e:	9207      	str	r2, [sp, #28]
 8004070:	e014      	b.n	800409c <_svfiprintf_r+0x110>
 8004072:	eba0 0308 	sub.w	r3, r0, r8
 8004076:	fa09 f303 	lsl.w	r3, r9, r3
 800407a:	4313      	orrs	r3, r2
 800407c:	9304      	str	r3, [sp, #16]
 800407e:	46a2      	mov	sl, r4
 8004080:	e7d2      	b.n	8004028 <_svfiprintf_r+0x9c>
 8004082:	9b03      	ldr	r3, [sp, #12]
 8004084:	1d19      	adds	r1, r3, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	9103      	str	r1, [sp, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	bfbb      	ittet	lt
 800408e:	425b      	neglt	r3, r3
 8004090:	f042 0202 	orrlt.w	r2, r2, #2
 8004094:	9307      	strge	r3, [sp, #28]
 8004096:	9307      	strlt	r3, [sp, #28]
 8004098:	bfb8      	it	lt
 800409a:	9204      	strlt	r2, [sp, #16]
 800409c:	7823      	ldrb	r3, [r4, #0]
 800409e:	2b2e      	cmp	r3, #46	; 0x2e
 80040a0:	d10c      	bne.n	80040bc <_svfiprintf_r+0x130>
 80040a2:	7863      	ldrb	r3, [r4, #1]
 80040a4:	2b2a      	cmp	r3, #42	; 0x2a
 80040a6:	d135      	bne.n	8004114 <_svfiprintf_r+0x188>
 80040a8:	9b03      	ldr	r3, [sp, #12]
 80040aa:	1d1a      	adds	r2, r3, #4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	9203      	str	r2, [sp, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bfb8      	it	lt
 80040b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80040b8:	3402      	adds	r4, #2
 80040ba:	9305      	str	r3, [sp, #20]
 80040bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004188 <_svfiprintf_r+0x1fc>
 80040c0:	7821      	ldrb	r1, [r4, #0]
 80040c2:	2203      	movs	r2, #3
 80040c4:	4650      	mov	r0, sl
 80040c6:	f7fc f88b 	bl	80001e0 <memchr>
 80040ca:	b140      	cbz	r0, 80040de <_svfiprintf_r+0x152>
 80040cc:	2340      	movs	r3, #64	; 0x40
 80040ce:	eba0 000a 	sub.w	r0, r0, sl
 80040d2:	fa03 f000 	lsl.w	r0, r3, r0
 80040d6:	9b04      	ldr	r3, [sp, #16]
 80040d8:	4303      	orrs	r3, r0
 80040da:	3401      	adds	r4, #1
 80040dc:	9304      	str	r3, [sp, #16]
 80040de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e2:	4826      	ldr	r0, [pc, #152]	; (800417c <_svfiprintf_r+0x1f0>)
 80040e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040e8:	2206      	movs	r2, #6
 80040ea:	f7fc f879 	bl	80001e0 <memchr>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d038      	beq.n	8004164 <_svfiprintf_r+0x1d8>
 80040f2:	4b23      	ldr	r3, [pc, #140]	; (8004180 <_svfiprintf_r+0x1f4>)
 80040f4:	bb1b      	cbnz	r3, 800413e <_svfiprintf_r+0x1b2>
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	3307      	adds	r3, #7
 80040fa:	f023 0307 	bic.w	r3, r3, #7
 80040fe:	3308      	adds	r3, #8
 8004100:	9303      	str	r3, [sp, #12]
 8004102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004104:	4433      	add	r3, r6
 8004106:	9309      	str	r3, [sp, #36]	; 0x24
 8004108:	e767      	b.n	8003fda <_svfiprintf_r+0x4e>
 800410a:	fb0c 3202 	mla	r2, ip, r2, r3
 800410e:	460c      	mov	r4, r1
 8004110:	2001      	movs	r0, #1
 8004112:	e7a5      	b.n	8004060 <_svfiprintf_r+0xd4>
 8004114:	2300      	movs	r3, #0
 8004116:	3401      	adds	r4, #1
 8004118:	9305      	str	r3, [sp, #20]
 800411a:	4619      	mov	r1, r3
 800411c:	f04f 0c0a 	mov.w	ip, #10
 8004120:	4620      	mov	r0, r4
 8004122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004126:	3a30      	subs	r2, #48	; 0x30
 8004128:	2a09      	cmp	r2, #9
 800412a:	d903      	bls.n	8004134 <_svfiprintf_r+0x1a8>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0c5      	beq.n	80040bc <_svfiprintf_r+0x130>
 8004130:	9105      	str	r1, [sp, #20]
 8004132:	e7c3      	b.n	80040bc <_svfiprintf_r+0x130>
 8004134:	fb0c 2101 	mla	r1, ip, r1, r2
 8004138:	4604      	mov	r4, r0
 800413a:	2301      	movs	r3, #1
 800413c:	e7f0      	b.n	8004120 <_svfiprintf_r+0x194>
 800413e:	ab03      	add	r3, sp, #12
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	462a      	mov	r2, r5
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <_svfiprintf_r+0x1f8>)
 8004146:	a904      	add	r1, sp, #16
 8004148:	4638      	mov	r0, r7
 800414a:	f3af 8000 	nop.w
 800414e:	1c42      	adds	r2, r0, #1
 8004150:	4606      	mov	r6, r0
 8004152:	d1d6      	bne.n	8004102 <_svfiprintf_r+0x176>
 8004154:	89ab      	ldrh	r3, [r5, #12]
 8004156:	065b      	lsls	r3, r3, #25
 8004158:	f53f af2c 	bmi.w	8003fb4 <_svfiprintf_r+0x28>
 800415c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800415e:	b01d      	add	sp, #116	; 0x74
 8004160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004164:	ab03      	add	r3, sp, #12
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	462a      	mov	r2, r5
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <_svfiprintf_r+0x1f8>)
 800416c:	a904      	add	r1, sp, #16
 800416e:	4638      	mov	r0, r7
 8004170:	f000 f87a 	bl	8004268 <_printf_i>
 8004174:	e7eb      	b.n	800414e <_svfiprintf_r+0x1c2>
 8004176:	bf00      	nop
 8004178:	080053cc 	.word	0x080053cc
 800417c:	080053d6 	.word	0x080053d6
 8004180:	00000000 	.word	0x00000000
 8004184:	08003ed5 	.word	0x08003ed5
 8004188:	080053d2 	.word	0x080053d2

0800418c <_printf_common>:
 800418c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004190:	4616      	mov	r6, r2
 8004192:	4699      	mov	r9, r3
 8004194:	688a      	ldr	r2, [r1, #8]
 8004196:	690b      	ldr	r3, [r1, #16]
 8004198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800419c:	4293      	cmp	r3, r2
 800419e:	bfb8      	it	lt
 80041a0:	4613      	movlt	r3, r2
 80041a2:	6033      	str	r3, [r6, #0]
 80041a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041a8:	4607      	mov	r7, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	b10a      	cbz	r2, 80041b2 <_printf_common+0x26>
 80041ae:	3301      	adds	r3, #1
 80041b0:	6033      	str	r3, [r6, #0]
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	0699      	lsls	r1, r3, #26
 80041b6:	bf42      	ittt	mi
 80041b8:	6833      	ldrmi	r3, [r6, #0]
 80041ba:	3302      	addmi	r3, #2
 80041bc:	6033      	strmi	r3, [r6, #0]
 80041be:	6825      	ldr	r5, [r4, #0]
 80041c0:	f015 0506 	ands.w	r5, r5, #6
 80041c4:	d106      	bne.n	80041d4 <_printf_common+0x48>
 80041c6:	f104 0a19 	add.w	sl, r4, #25
 80041ca:	68e3      	ldr	r3, [r4, #12]
 80041cc:	6832      	ldr	r2, [r6, #0]
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	42ab      	cmp	r3, r5
 80041d2:	dc26      	bgt.n	8004222 <_printf_common+0x96>
 80041d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041d8:	1e13      	subs	r3, r2, #0
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	bf18      	it	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	0692      	lsls	r2, r2, #26
 80041e2:	d42b      	bmi.n	800423c <_printf_common+0xb0>
 80041e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041e8:	4649      	mov	r1, r9
 80041ea:	4638      	mov	r0, r7
 80041ec:	47c0      	blx	r8
 80041ee:	3001      	adds	r0, #1
 80041f0:	d01e      	beq.n	8004230 <_printf_common+0xa4>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	68e5      	ldr	r5, [r4, #12]
 80041f6:	6832      	ldr	r2, [r6, #0]
 80041f8:	f003 0306 	and.w	r3, r3, #6
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	bf08      	it	eq
 8004200:	1aad      	subeq	r5, r5, r2
 8004202:	68a3      	ldr	r3, [r4, #8]
 8004204:	6922      	ldr	r2, [r4, #16]
 8004206:	bf0c      	ite	eq
 8004208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800420c:	2500      	movne	r5, #0
 800420e:	4293      	cmp	r3, r2
 8004210:	bfc4      	itt	gt
 8004212:	1a9b      	subgt	r3, r3, r2
 8004214:	18ed      	addgt	r5, r5, r3
 8004216:	2600      	movs	r6, #0
 8004218:	341a      	adds	r4, #26
 800421a:	42b5      	cmp	r5, r6
 800421c:	d11a      	bne.n	8004254 <_printf_common+0xc8>
 800421e:	2000      	movs	r0, #0
 8004220:	e008      	b.n	8004234 <_printf_common+0xa8>
 8004222:	2301      	movs	r3, #1
 8004224:	4652      	mov	r2, sl
 8004226:	4649      	mov	r1, r9
 8004228:	4638      	mov	r0, r7
 800422a:	47c0      	blx	r8
 800422c:	3001      	adds	r0, #1
 800422e:	d103      	bne.n	8004238 <_printf_common+0xac>
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004238:	3501      	adds	r5, #1
 800423a:	e7c6      	b.n	80041ca <_printf_common+0x3e>
 800423c:	18e1      	adds	r1, r4, r3
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	2030      	movs	r0, #48	; 0x30
 8004242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004246:	4422      	add	r2, r4
 8004248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800424c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004250:	3302      	adds	r3, #2
 8004252:	e7c7      	b.n	80041e4 <_printf_common+0x58>
 8004254:	2301      	movs	r3, #1
 8004256:	4622      	mov	r2, r4
 8004258:	4649      	mov	r1, r9
 800425a:	4638      	mov	r0, r7
 800425c:	47c0      	blx	r8
 800425e:	3001      	adds	r0, #1
 8004260:	d0e6      	beq.n	8004230 <_printf_common+0xa4>
 8004262:	3601      	adds	r6, #1
 8004264:	e7d9      	b.n	800421a <_printf_common+0x8e>
	...

08004268 <_printf_i>:
 8004268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800426c:	7e0f      	ldrb	r7, [r1, #24]
 800426e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004270:	2f78      	cmp	r7, #120	; 0x78
 8004272:	4691      	mov	r9, r2
 8004274:	4680      	mov	r8, r0
 8004276:	460c      	mov	r4, r1
 8004278:	469a      	mov	sl, r3
 800427a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800427e:	d807      	bhi.n	8004290 <_printf_i+0x28>
 8004280:	2f62      	cmp	r7, #98	; 0x62
 8004282:	d80a      	bhi.n	800429a <_printf_i+0x32>
 8004284:	2f00      	cmp	r7, #0
 8004286:	f000 80d8 	beq.w	800443a <_printf_i+0x1d2>
 800428a:	2f58      	cmp	r7, #88	; 0x58
 800428c:	f000 80a3 	beq.w	80043d6 <_printf_i+0x16e>
 8004290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004298:	e03a      	b.n	8004310 <_printf_i+0xa8>
 800429a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800429e:	2b15      	cmp	r3, #21
 80042a0:	d8f6      	bhi.n	8004290 <_printf_i+0x28>
 80042a2:	a101      	add	r1, pc, #4	; (adr r1, 80042a8 <_printf_i+0x40>)
 80042a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042a8:	08004301 	.word	0x08004301
 80042ac:	08004315 	.word	0x08004315
 80042b0:	08004291 	.word	0x08004291
 80042b4:	08004291 	.word	0x08004291
 80042b8:	08004291 	.word	0x08004291
 80042bc:	08004291 	.word	0x08004291
 80042c0:	08004315 	.word	0x08004315
 80042c4:	08004291 	.word	0x08004291
 80042c8:	08004291 	.word	0x08004291
 80042cc:	08004291 	.word	0x08004291
 80042d0:	08004291 	.word	0x08004291
 80042d4:	08004421 	.word	0x08004421
 80042d8:	08004345 	.word	0x08004345
 80042dc:	08004403 	.word	0x08004403
 80042e0:	08004291 	.word	0x08004291
 80042e4:	08004291 	.word	0x08004291
 80042e8:	08004443 	.word	0x08004443
 80042ec:	08004291 	.word	0x08004291
 80042f0:	08004345 	.word	0x08004345
 80042f4:	08004291 	.word	0x08004291
 80042f8:	08004291 	.word	0x08004291
 80042fc:	0800440b 	.word	0x0800440b
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	1d1a      	adds	r2, r3, #4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	602a      	str	r2, [r5, #0]
 8004308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800430c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004310:	2301      	movs	r3, #1
 8004312:	e0a3      	b.n	800445c <_printf_i+0x1f4>
 8004314:	6820      	ldr	r0, [r4, #0]
 8004316:	6829      	ldr	r1, [r5, #0]
 8004318:	0606      	lsls	r6, r0, #24
 800431a:	f101 0304 	add.w	r3, r1, #4
 800431e:	d50a      	bpl.n	8004336 <_printf_i+0xce>
 8004320:	680e      	ldr	r6, [r1, #0]
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	2e00      	cmp	r6, #0
 8004326:	da03      	bge.n	8004330 <_printf_i+0xc8>
 8004328:	232d      	movs	r3, #45	; 0x2d
 800432a:	4276      	negs	r6, r6
 800432c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004330:	485e      	ldr	r0, [pc, #376]	; (80044ac <_printf_i+0x244>)
 8004332:	230a      	movs	r3, #10
 8004334:	e019      	b.n	800436a <_printf_i+0x102>
 8004336:	680e      	ldr	r6, [r1, #0]
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800433e:	bf18      	it	ne
 8004340:	b236      	sxthne	r6, r6
 8004342:	e7ef      	b.n	8004324 <_printf_i+0xbc>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	6820      	ldr	r0, [r4, #0]
 8004348:	1d19      	adds	r1, r3, #4
 800434a:	6029      	str	r1, [r5, #0]
 800434c:	0601      	lsls	r1, r0, #24
 800434e:	d501      	bpl.n	8004354 <_printf_i+0xec>
 8004350:	681e      	ldr	r6, [r3, #0]
 8004352:	e002      	b.n	800435a <_printf_i+0xf2>
 8004354:	0646      	lsls	r6, r0, #25
 8004356:	d5fb      	bpl.n	8004350 <_printf_i+0xe8>
 8004358:	881e      	ldrh	r6, [r3, #0]
 800435a:	4854      	ldr	r0, [pc, #336]	; (80044ac <_printf_i+0x244>)
 800435c:	2f6f      	cmp	r7, #111	; 0x6f
 800435e:	bf0c      	ite	eq
 8004360:	2308      	moveq	r3, #8
 8004362:	230a      	movne	r3, #10
 8004364:	2100      	movs	r1, #0
 8004366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800436a:	6865      	ldr	r5, [r4, #4]
 800436c:	60a5      	str	r5, [r4, #8]
 800436e:	2d00      	cmp	r5, #0
 8004370:	bfa2      	ittt	ge
 8004372:	6821      	ldrge	r1, [r4, #0]
 8004374:	f021 0104 	bicge.w	r1, r1, #4
 8004378:	6021      	strge	r1, [r4, #0]
 800437a:	b90e      	cbnz	r6, 8004380 <_printf_i+0x118>
 800437c:	2d00      	cmp	r5, #0
 800437e:	d04d      	beq.n	800441c <_printf_i+0x1b4>
 8004380:	4615      	mov	r5, r2
 8004382:	fbb6 f1f3 	udiv	r1, r6, r3
 8004386:	fb03 6711 	mls	r7, r3, r1, r6
 800438a:	5dc7      	ldrb	r7, [r0, r7]
 800438c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004390:	4637      	mov	r7, r6
 8004392:	42bb      	cmp	r3, r7
 8004394:	460e      	mov	r6, r1
 8004396:	d9f4      	bls.n	8004382 <_printf_i+0x11a>
 8004398:	2b08      	cmp	r3, #8
 800439a:	d10b      	bne.n	80043b4 <_printf_i+0x14c>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	07de      	lsls	r6, r3, #31
 80043a0:	d508      	bpl.n	80043b4 <_printf_i+0x14c>
 80043a2:	6923      	ldr	r3, [r4, #16]
 80043a4:	6861      	ldr	r1, [r4, #4]
 80043a6:	4299      	cmp	r1, r3
 80043a8:	bfde      	ittt	le
 80043aa:	2330      	movle	r3, #48	; 0x30
 80043ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043b4:	1b52      	subs	r2, r2, r5
 80043b6:	6122      	str	r2, [r4, #16]
 80043b8:	f8cd a000 	str.w	sl, [sp]
 80043bc:	464b      	mov	r3, r9
 80043be:	aa03      	add	r2, sp, #12
 80043c0:	4621      	mov	r1, r4
 80043c2:	4640      	mov	r0, r8
 80043c4:	f7ff fee2 	bl	800418c <_printf_common>
 80043c8:	3001      	adds	r0, #1
 80043ca:	d14c      	bne.n	8004466 <_printf_i+0x1fe>
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	b004      	add	sp, #16
 80043d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d6:	4835      	ldr	r0, [pc, #212]	; (80044ac <_printf_i+0x244>)
 80043d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043dc:	6829      	ldr	r1, [r5, #0]
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80043e4:	6029      	str	r1, [r5, #0]
 80043e6:	061d      	lsls	r5, r3, #24
 80043e8:	d514      	bpl.n	8004414 <_printf_i+0x1ac>
 80043ea:	07df      	lsls	r7, r3, #31
 80043ec:	bf44      	itt	mi
 80043ee:	f043 0320 	orrmi.w	r3, r3, #32
 80043f2:	6023      	strmi	r3, [r4, #0]
 80043f4:	b91e      	cbnz	r6, 80043fe <_printf_i+0x196>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	f023 0320 	bic.w	r3, r3, #32
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	2310      	movs	r3, #16
 8004400:	e7b0      	b.n	8004364 <_printf_i+0xfc>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	f043 0320 	orr.w	r3, r3, #32
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	2378      	movs	r3, #120	; 0x78
 800440c:	4828      	ldr	r0, [pc, #160]	; (80044b0 <_printf_i+0x248>)
 800440e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004412:	e7e3      	b.n	80043dc <_printf_i+0x174>
 8004414:	0659      	lsls	r1, r3, #25
 8004416:	bf48      	it	mi
 8004418:	b2b6      	uxthmi	r6, r6
 800441a:	e7e6      	b.n	80043ea <_printf_i+0x182>
 800441c:	4615      	mov	r5, r2
 800441e:	e7bb      	b.n	8004398 <_printf_i+0x130>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	6826      	ldr	r6, [r4, #0]
 8004424:	6961      	ldr	r1, [r4, #20]
 8004426:	1d18      	adds	r0, r3, #4
 8004428:	6028      	str	r0, [r5, #0]
 800442a:	0635      	lsls	r5, r6, #24
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	d501      	bpl.n	8004434 <_printf_i+0x1cc>
 8004430:	6019      	str	r1, [r3, #0]
 8004432:	e002      	b.n	800443a <_printf_i+0x1d2>
 8004434:	0670      	lsls	r0, r6, #25
 8004436:	d5fb      	bpl.n	8004430 <_printf_i+0x1c8>
 8004438:	8019      	strh	r1, [r3, #0]
 800443a:	2300      	movs	r3, #0
 800443c:	6123      	str	r3, [r4, #16]
 800443e:	4615      	mov	r5, r2
 8004440:	e7ba      	b.n	80043b8 <_printf_i+0x150>
 8004442:	682b      	ldr	r3, [r5, #0]
 8004444:	1d1a      	adds	r2, r3, #4
 8004446:	602a      	str	r2, [r5, #0]
 8004448:	681d      	ldr	r5, [r3, #0]
 800444a:	6862      	ldr	r2, [r4, #4]
 800444c:	2100      	movs	r1, #0
 800444e:	4628      	mov	r0, r5
 8004450:	f7fb fec6 	bl	80001e0 <memchr>
 8004454:	b108      	cbz	r0, 800445a <_printf_i+0x1f2>
 8004456:	1b40      	subs	r0, r0, r5
 8004458:	6060      	str	r0, [r4, #4]
 800445a:	6863      	ldr	r3, [r4, #4]
 800445c:	6123      	str	r3, [r4, #16]
 800445e:	2300      	movs	r3, #0
 8004460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004464:	e7a8      	b.n	80043b8 <_printf_i+0x150>
 8004466:	6923      	ldr	r3, [r4, #16]
 8004468:	462a      	mov	r2, r5
 800446a:	4649      	mov	r1, r9
 800446c:	4640      	mov	r0, r8
 800446e:	47d0      	blx	sl
 8004470:	3001      	adds	r0, #1
 8004472:	d0ab      	beq.n	80043cc <_printf_i+0x164>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	079b      	lsls	r3, r3, #30
 8004478:	d413      	bmi.n	80044a2 <_printf_i+0x23a>
 800447a:	68e0      	ldr	r0, [r4, #12]
 800447c:	9b03      	ldr	r3, [sp, #12]
 800447e:	4298      	cmp	r0, r3
 8004480:	bfb8      	it	lt
 8004482:	4618      	movlt	r0, r3
 8004484:	e7a4      	b.n	80043d0 <_printf_i+0x168>
 8004486:	2301      	movs	r3, #1
 8004488:	4632      	mov	r2, r6
 800448a:	4649      	mov	r1, r9
 800448c:	4640      	mov	r0, r8
 800448e:	47d0      	blx	sl
 8004490:	3001      	adds	r0, #1
 8004492:	d09b      	beq.n	80043cc <_printf_i+0x164>
 8004494:	3501      	adds	r5, #1
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	9903      	ldr	r1, [sp, #12]
 800449a:	1a5b      	subs	r3, r3, r1
 800449c:	42ab      	cmp	r3, r5
 800449e:	dcf2      	bgt.n	8004486 <_printf_i+0x21e>
 80044a0:	e7eb      	b.n	800447a <_printf_i+0x212>
 80044a2:	2500      	movs	r5, #0
 80044a4:	f104 0619 	add.w	r6, r4, #25
 80044a8:	e7f5      	b.n	8004496 <_printf_i+0x22e>
 80044aa:	bf00      	nop
 80044ac:	080053dd 	.word	0x080053dd
 80044b0:	080053ee 	.word	0x080053ee

080044b4 <memcpy>:
 80044b4:	440a      	add	r2, r1
 80044b6:	4291      	cmp	r1, r2
 80044b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80044bc:	d100      	bne.n	80044c0 <memcpy+0xc>
 80044be:	4770      	bx	lr
 80044c0:	b510      	push	{r4, lr}
 80044c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044ca:	4291      	cmp	r1, r2
 80044cc:	d1f9      	bne.n	80044c2 <memcpy+0xe>
 80044ce:	bd10      	pop	{r4, pc}

080044d0 <memmove>:
 80044d0:	4288      	cmp	r0, r1
 80044d2:	b510      	push	{r4, lr}
 80044d4:	eb01 0402 	add.w	r4, r1, r2
 80044d8:	d902      	bls.n	80044e0 <memmove+0x10>
 80044da:	4284      	cmp	r4, r0
 80044dc:	4623      	mov	r3, r4
 80044de:	d807      	bhi.n	80044f0 <memmove+0x20>
 80044e0:	1e43      	subs	r3, r0, #1
 80044e2:	42a1      	cmp	r1, r4
 80044e4:	d008      	beq.n	80044f8 <memmove+0x28>
 80044e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ee:	e7f8      	b.n	80044e2 <memmove+0x12>
 80044f0:	4402      	add	r2, r0
 80044f2:	4601      	mov	r1, r0
 80044f4:	428a      	cmp	r2, r1
 80044f6:	d100      	bne.n	80044fa <memmove+0x2a>
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004502:	e7f7      	b.n	80044f4 <memmove+0x24>

08004504 <_free_r>:
 8004504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004506:	2900      	cmp	r1, #0
 8004508:	d044      	beq.n	8004594 <_free_r+0x90>
 800450a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800450e:	9001      	str	r0, [sp, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	f1a1 0404 	sub.w	r4, r1, #4
 8004516:	bfb8      	it	lt
 8004518:	18e4      	addlt	r4, r4, r3
 800451a:	f000 f913 	bl	8004744 <__malloc_lock>
 800451e:	4a1e      	ldr	r2, [pc, #120]	; (8004598 <_free_r+0x94>)
 8004520:	9801      	ldr	r0, [sp, #4]
 8004522:	6813      	ldr	r3, [r2, #0]
 8004524:	b933      	cbnz	r3, 8004534 <_free_r+0x30>
 8004526:	6063      	str	r3, [r4, #4]
 8004528:	6014      	str	r4, [r2, #0]
 800452a:	b003      	add	sp, #12
 800452c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004530:	f000 b90e 	b.w	8004750 <__malloc_unlock>
 8004534:	42a3      	cmp	r3, r4
 8004536:	d908      	bls.n	800454a <_free_r+0x46>
 8004538:	6825      	ldr	r5, [r4, #0]
 800453a:	1961      	adds	r1, r4, r5
 800453c:	428b      	cmp	r3, r1
 800453e:	bf01      	itttt	eq
 8004540:	6819      	ldreq	r1, [r3, #0]
 8004542:	685b      	ldreq	r3, [r3, #4]
 8004544:	1949      	addeq	r1, r1, r5
 8004546:	6021      	streq	r1, [r4, #0]
 8004548:	e7ed      	b.n	8004526 <_free_r+0x22>
 800454a:	461a      	mov	r2, r3
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	b10b      	cbz	r3, 8004554 <_free_r+0x50>
 8004550:	42a3      	cmp	r3, r4
 8004552:	d9fa      	bls.n	800454a <_free_r+0x46>
 8004554:	6811      	ldr	r1, [r2, #0]
 8004556:	1855      	adds	r5, r2, r1
 8004558:	42a5      	cmp	r5, r4
 800455a:	d10b      	bne.n	8004574 <_free_r+0x70>
 800455c:	6824      	ldr	r4, [r4, #0]
 800455e:	4421      	add	r1, r4
 8004560:	1854      	adds	r4, r2, r1
 8004562:	42a3      	cmp	r3, r4
 8004564:	6011      	str	r1, [r2, #0]
 8004566:	d1e0      	bne.n	800452a <_free_r+0x26>
 8004568:	681c      	ldr	r4, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	6053      	str	r3, [r2, #4]
 800456e:	4421      	add	r1, r4
 8004570:	6011      	str	r1, [r2, #0]
 8004572:	e7da      	b.n	800452a <_free_r+0x26>
 8004574:	d902      	bls.n	800457c <_free_r+0x78>
 8004576:	230c      	movs	r3, #12
 8004578:	6003      	str	r3, [r0, #0]
 800457a:	e7d6      	b.n	800452a <_free_r+0x26>
 800457c:	6825      	ldr	r5, [r4, #0]
 800457e:	1961      	adds	r1, r4, r5
 8004580:	428b      	cmp	r3, r1
 8004582:	bf04      	itt	eq
 8004584:	6819      	ldreq	r1, [r3, #0]
 8004586:	685b      	ldreq	r3, [r3, #4]
 8004588:	6063      	str	r3, [r4, #4]
 800458a:	bf04      	itt	eq
 800458c:	1949      	addeq	r1, r1, r5
 800458e:	6021      	streq	r1, [r4, #0]
 8004590:	6054      	str	r4, [r2, #4]
 8004592:	e7ca      	b.n	800452a <_free_r+0x26>
 8004594:	b003      	add	sp, #12
 8004596:	bd30      	pop	{r4, r5, pc}
 8004598:	20000224 	.word	0x20000224

0800459c <sbrk_aligned>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4e0e      	ldr	r6, [pc, #56]	; (80045d8 <sbrk_aligned+0x3c>)
 80045a0:	460c      	mov	r4, r1
 80045a2:	6831      	ldr	r1, [r6, #0]
 80045a4:	4605      	mov	r5, r0
 80045a6:	b911      	cbnz	r1, 80045ae <sbrk_aligned+0x12>
 80045a8:	f000 f8bc 	bl	8004724 <_sbrk_r>
 80045ac:	6030      	str	r0, [r6, #0]
 80045ae:	4621      	mov	r1, r4
 80045b0:	4628      	mov	r0, r5
 80045b2:	f000 f8b7 	bl	8004724 <_sbrk_r>
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	d00a      	beq.n	80045d0 <sbrk_aligned+0x34>
 80045ba:	1cc4      	adds	r4, r0, #3
 80045bc:	f024 0403 	bic.w	r4, r4, #3
 80045c0:	42a0      	cmp	r0, r4
 80045c2:	d007      	beq.n	80045d4 <sbrk_aligned+0x38>
 80045c4:	1a21      	subs	r1, r4, r0
 80045c6:	4628      	mov	r0, r5
 80045c8:	f000 f8ac 	bl	8004724 <_sbrk_r>
 80045cc:	3001      	adds	r0, #1
 80045ce:	d101      	bne.n	80045d4 <sbrk_aligned+0x38>
 80045d0:	f04f 34ff 	mov.w	r4, #4294967295
 80045d4:	4620      	mov	r0, r4
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	20000228 	.word	0x20000228

080045dc <_malloc_r>:
 80045dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e0:	1ccd      	adds	r5, r1, #3
 80045e2:	f025 0503 	bic.w	r5, r5, #3
 80045e6:	3508      	adds	r5, #8
 80045e8:	2d0c      	cmp	r5, #12
 80045ea:	bf38      	it	cc
 80045ec:	250c      	movcc	r5, #12
 80045ee:	2d00      	cmp	r5, #0
 80045f0:	4607      	mov	r7, r0
 80045f2:	db01      	blt.n	80045f8 <_malloc_r+0x1c>
 80045f4:	42a9      	cmp	r1, r5
 80045f6:	d905      	bls.n	8004604 <_malloc_r+0x28>
 80045f8:	230c      	movs	r3, #12
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	2600      	movs	r6, #0
 80045fe:	4630      	mov	r0, r6
 8004600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004604:	4e2e      	ldr	r6, [pc, #184]	; (80046c0 <_malloc_r+0xe4>)
 8004606:	f000 f89d 	bl	8004744 <__malloc_lock>
 800460a:	6833      	ldr	r3, [r6, #0]
 800460c:	461c      	mov	r4, r3
 800460e:	bb34      	cbnz	r4, 800465e <_malloc_r+0x82>
 8004610:	4629      	mov	r1, r5
 8004612:	4638      	mov	r0, r7
 8004614:	f7ff ffc2 	bl	800459c <sbrk_aligned>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	4604      	mov	r4, r0
 800461c:	d14d      	bne.n	80046ba <_malloc_r+0xde>
 800461e:	6834      	ldr	r4, [r6, #0]
 8004620:	4626      	mov	r6, r4
 8004622:	2e00      	cmp	r6, #0
 8004624:	d140      	bne.n	80046a8 <_malloc_r+0xcc>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	4631      	mov	r1, r6
 800462a:	4638      	mov	r0, r7
 800462c:	eb04 0803 	add.w	r8, r4, r3
 8004630:	f000 f878 	bl	8004724 <_sbrk_r>
 8004634:	4580      	cmp	r8, r0
 8004636:	d13a      	bne.n	80046ae <_malloc_r+0xd2>
 8004638:	6821      	ldr	r1, [r4, #0]
 800463a:	3503      	adds	r5, #3
 800463c:	1a6d      	subs	r5, r5, r1
 800463e:	f025 0503 	bic.w	r5, r5, #3
 8004642:	3508      	adds	r5, #8
 8004644:	2d0c      	cmp	r5, #12
 8004646:	bf38      	it	cc
 8004648:	250c      	movcc	r5, #12
 800464a:	4629      	mov	r1, r5
 800464c:	4638      	mov	r0, r7
 800464e:	f7ff ffa5 	bl	800459c <sbrk_aligned>
 8004652:	3001      	adds	r0, #1
 8004654:	d02b      	beq.n	80046ae <_malloc_r+0xd2>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	442b      	add	r3, r5
 800465a:	6023      	str	r3, [r4, #0]
 800465c:	e00e      	b.n	800467c <_malloc_r+0xa0>
 800465e:	6822      	ldr	r2, [r4, #0]
 8004660:	1b52      	subs	r2, r2, r5
 8004662:	d41e      	bmi.n	80046a2 <_malloc_r+0xc6>
 8004664:	2a0b      	cmp	r2, #11
 8004666:	d916      	bls.n	8004696 <_malloc_r+0xba>
 8004668:	1961      	adds	r1, r4, r5
 800466a:	42a3      	cmp	r3, r4
 800466c:	6025      	str	r5, [r4, #0]
 800466e:	bf18      	it	ne
 8004670:	6059      	strne	r1, [r3, #4]
 8004672:	6863      	ldr	r3, [r4, #4]
 8004674:	bf08      	it	eq
 8004676:	6031      	streq	r1, [r6, #0]
 8004678:	5162      	str	r2, [r4, r5]
 800467a:	604b      	str	r3, [r1, #4]
 800467c:	4638      	mov	r0, r7
 800467e:	f104 060b 	add.w	r6, r4, #11
 8004682:	f000 f865 	bl	8004750 <__malloc_unlock>
 8004686:	f026 0607 	bic.w	r6, r6, #7
 800468a:	1d23      	adds	r3, r4, #4
 800468c:	1af2      	subs	r2, r6, r3
 800468e:	d0b6      	beq.n	80045fe <_malloc_r+0x22>
 8004690:	1b9b      	subs	r3, r3, r6
 8004692:	50a3      	str	r3, [r4, r2]
 8004694:	e7b3      	b.n	80045fe <_malloc_r+0x22>
 8004696:	6862      	ldr	r2, [r4, #4]
 8004698:	42a3      	cmp	r3, r4
 800469a:	bf0c      	ite	eq
 800469c:	6032      	streq	r2, [r6, #0]
 800469e:	605a      	strne	r2, [r3, #4]
 80046a0:	e7ec      	b.n	800467c <_malloc_r+0xa0>
 80046a2:	4623      	mov	r3, r4
 80046a4:	6864      	ldr	r4, [r4, #4]
 80046a6:	e7b2      	b.n	800460e <_malloc_r+0x32>
 80046a8:	4634      	mov	r4, r6
 80046aa:	6876      	ldr	r6, [r6, #4]
 80046ac:	e7b9      	b.n	8004622 <_malloc_r+0x46>
 80046ae:	230c      	movs	r3, #12
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4638      	mov	r0, r7
 80046b4:	f000 f84c 	bl	8004750 <__malloc_unlock>
 80046b8:	e7a1      	b.n	80045fe <_malloc_r+0x22>
 80046ba:	6025      	str	r5, [r4, #0]
 80046bc:	e7de      	b.n	800467c <_malloc_r+0xa0>
 80046be:	bf00      	nop
 80046c0:	20000224 	.word	0x20000224

080046c4 <_realloc_r>:
 80046c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c8:	4680      	mov	r8, r0
 80046ca:	4614      	mov	r4, r2
 80046cc:	460e      	mov	r6, r1
 80046ce:	b921      	cbnz	r1, 80046da <_realloc_r+0x16>
 80046d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d4:	4611      	mov	r1, r2
 80046d6:	f7ff bf81 	b.w	80045dc <_malloc_r>
 80046da:	b92a      	cbnz	r2, 80046e8 <_realloc_r+0x24>
 80046dc:	f7ff ff12 	bl	8004504 <_free_r>
 80046e0:	4625      	mov	r5, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e8:	f000 f838 	bl	800475c <_malloc_usable_size_r>
 80046ec:	4284      	cmp	r4, r0
 80046ee:	4607      	mov	r7, r0
 80046f0:	d802      	bhi.n	80046f8 <_realloc_r+0x34>
 80046f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046f6:	d812      	bhi.n	800471e <_realloc_r+0x5a>
 80046f8:	4621      	mov	r1, r4
 80046fa:	4640      	mov	r0, r8
 80046fc:	f7ff ff6e 	bl	80045dc <_malloc_r>
 8004700:	4605      	mov	r5, r0
 8004702:	2800      	cmp	r0, #0
 8004704:	d0ed      	beq.n	80046e2 <_realloc_r+0x1e>
 8004706:	42bc      	cmp	r4, r7
 8004708:	4622      	mov	r2, r4
 800470a:	4631      	mov	r1, r6
 800470c:	bf28      	it	cs
 800470e:	463a      	movcs	r2, r7
 8004710:	f7ff fed0 	bl	80044b4 <memcpy>
 8004714:	4631      	mov	r1, r6
 8004716:	4640      	mov	r0, r8
 8004718:	f7ff fef4 	bl	8004504 <_free_r>
 800471c:	e7e1      	b.n	80046e2 <_realloc_r+0x1e>
 800471e:	4635      	mov	r5, r6
 8004720:	e7df      	b.n	80046e2 <_realloc_r+0x1e>
	...

08004724 <_sbrk_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d06      	ldr	r5, [pc, #24]	; (8004740 <_sbrk_r+0x1c>)
 8004728:	2300      	movs	r3, #0
 800472a:	4604      	mov	r4, r0
 800472c:	4608      	mov	r0, r1
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	f7fc fbb8 	bl	8000ea4 <_sbrk>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_sbrk_r+0x1a>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	b103      	cbz	r3, 800473e <_sbrk_r+0x1a>
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	2000022c 	.word	0x2000022c

08004744 <__malloc_lock>:
 8004744:	4801      	ldr	r0, [pc, #4]	; (800474c <__malloc_lock+0x8>)
 8004746:	f000 b811 	b.w	800476c <__retarget_lock_acquire_recursive>
 800474a:	bf00      	nop
 800474c:	20000230 	.word	0x20000230

08004750 <__malloc_unlock>:
 8004750:	4801      	ldr	r0, [pc, #4]	; (8004758 <__malloc_unlock+0x8>)
 8004752:	f000 b80c 	b.w	800476e <__retarget_lock_release_recursive>
 8004756:	bf00      	nop
 8004758:	20000230 	.word	0x20000230

0800475c <_malloc_usable_size_r>:
 800475c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004760:	1f18      	subs	r0, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	bfbc      	itt	lt
 8004766:	580b      	ldrlt	r3, [r1, r0]
 8004768:	18c0      	addlt	r0, r0, r3
 800476a:	4770      	bx	lr

0800476c <__retarget_lock_acquire_recursive>:
 800476c:	4770      	bx	lr

0800476e <__retarget_lock_release_recursive>:
 800476e:	4770      	bx	lr

08004770 <_init>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	bf00      	nop
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr

0800477c <_fini>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	bf00      	nop
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr
